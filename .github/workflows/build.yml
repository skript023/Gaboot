name: C++ Build, Vcpkg Install, and Artifact Upload

on:
  push:
    branches:
      - main  # Adjust branch name if necessary
  pull_request:
    branches:
      - main  # Adjust branch name if necessary

jobs:
  build_and_upload:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y build-essential cmake &&
        sudo apt install libx11-dev libxft-dev &&
        sudo apt-get install autoconf &&
        sudo apt-get install libtool &&
        sudo apt-get install bison &&
        sudo apt-get install gperf &&
        sudo apt-get install libgles2-mesa-dev &&
        sudo apt-get install libxext-dev &&
        sudo apt-get install libxrandr-dev &&
        sudo apt-get install libxi-dev &&
        sudo apt-get install libxcursor-dev &&
        sudo apt-get install libxdamage-dev &&
        sudo apt-get install libxinerama-dev &&
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh
        ./vcpkg integrate install

    - name: Install Vcpkg dependencies
      run: |
        ./vcpkg/vcpkg install opencv --clean-after-build  # Replace <your_dependency_here> with your actual dependency name
        ./vcpkg/vcpkg install drogon[core,ctl,orm,mysql] --clean-after-build # Replace <your_dependency_here> with your actual dependency name

    - name: Configure and build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_TOOLCHAIN_FILE=/mnt/j/database/Tools/vcpkg/vcpkg/scripts/buildsystems/vcpkg.cmake
        make

    - name: Run tests
      run: |
        cd build
        ctest --verbose

    - name: Upload artifact to VPS
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}  # Use SSH private key for authentication
        source: "build/"  # Adjust this to the directory containing your built binaries
        target: "/home/${{ secrets.SERVER_USER }}/gbt-backend/Linux/"
