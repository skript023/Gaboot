/**
 *
 *  MasterCustomers.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace gaboot
{

class MasterCustomers
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _firstname;
        static const std::string _lastname;
        static const std::string _username;
        static const std::string _email;
        static const std::string _phoneNumber;
        static const std::string _addressDetail;
        static const std::string _latitude;
        static const std::string _longitude;
        static const std::string _password;
        static const std::string _token;
        static const std::string _isActive;
        static const std::string _imagePath;
        static const std::string _thumbnailPath;
        static const std::string _createdAt;
        static const std::string _updatedAt;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = int32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit MasterCustomers(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit MasterCustomers(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    MasterCustomers(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    MasterCustomers() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const int32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const int32_t &pId) noexcept;

    /**  For column firstname  */
    ///Get the value of the column firstname, returns the default value if the column is null
    const std::string &getValueOfFirstname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirstname() const noexcept;
    ///Set the value of the column firstname
    void setFirstname(const std::string &pFirstname) noexcept;
    void setFirstname(std::string &&pFirstname) noexcept;
    void setFirstnameToNull() noexcept;

    /**  For column lastname  */
    ///Get the value of the column lastname, returns the default value if the column is null
    const std::string &getValueOfLastname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLastname() const noexcept;
    ///Set the value of the column lastname
    void setLastname(const std::string &pLastname) noexcept;
    void setLastname(std::string &&pLastname) noexcept;
    void setLastnameToNull() noexcept;

    /**  For column username  */
    ///Get the value of the column username, returns the default value if the column is null
    const std::string &getValueOfUsername() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUsername() const noexcept;
    ///Set the value of the column username
    void setUsername(const std::string &pUsername) noexcept;
    void setUsername(std::string &&pUsername) noexcept;
    void setUsernameToNull() noexcept;

    /**  For column email  */
    ///Get the value of the column email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;
    ///Set the value of the column email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;
    void setEmailToNull() noexcept;

    /**  For column phoneNumber  */
    ///Get the value of the column phoneNumber, returns the default value if the column is null
    const std::string &getValueOfPhonenumber() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPhonenumber() const noexcept;
    ///Set the value of the column phoneNumber
    void setPhonenumber(const std::string &pPhonenumber) noexcept;
    void setPhonenumber(std::string &&pPhonenumber) noexcept;
    void setPhonenumberToNull() noexcept;

    /**  For column addressDetail  */
    ///Get the value of the column addressDetail, returns the default value if the column is null
    const std::string &getValueOfAddressdetail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAddressdetail() const noexcept;
    ///Set the value of the column addressDetail
    void setAddressdetail(const std::string &pAddressdetail) noexcept;
    void setAddressdetail(std::string &&pAddressdetail) noexcept;
    void setAddressdetailToNull() noexcept;

    /**  For column latitude  */
    ///Get the value of the column latitude, returns the default value if the column is null
    const std::string &getValueOfLatitude() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLatitude() const noexcept;
    ///Set the value of the column latitude
    void setLatitude(const std::string &pLatitude) noexcept;
    void setLatitude(std::string &&pLatitude) noexcept;
    void setLatitudeToNull() noexcept;

    /**  For column longitude  */
    ///Get the value of the column longitude, returns the default value if the column is null
    const std::string &getValueOfLongitude() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getLongitude() const noexcept;
    ///Set the value of the column longitude
    void setLongitude(const std::string &pLongitude) noexcept;
    void setLongitude(std::string &&pLongitude) noexcept;
    void setLongitudeToNull() noexcept;

    /**  For column password  */
    ///Get the value of the column password, returns the default value if the column is null
    const std::string &getValueOfPassword() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPassword() const noexcept;
    ///Set the value of the column password
    void setPassword(const std::string &pPassword) noexcept;
    void setPassword(std::string &&pPassword) noexcept;
    void setPasswordToNull() noexcept;

    /**  For column token  */
    ///Get the value of the column token, returns the default value if the column is null
    const std::string &getValueOfToken() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getToken() const noexcept;
    ///Set the value of the column token
    void setToken(const std::string &pToken) noexcept;
    void setToken(std::string &&pToken) noexcept;
    void setTokenToNull() noexcept;

    /**  For column isActive  */
    ///Get the value of the column isActive, returns the default value if the column is null
    const int8_t &getValueOfIsactive() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getIsactive() const noexcept;
    ///Set the value of the column isActive
    void setIsactive(const int8_t &pIsactive) noexcept;
    void setIsactiveToNull() noexcept;

    /**  For column imagePath  */
    ///Get the value of the column imagePath, returns the default value if the column is null
    const std::string &getValueOfImagepath() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getImagepath() const noexcept;
    ///Set the value of the column imagePath
    void setImagepath(const std::string &pImagepath) noexcept;
    void setImagepath(std::string &&pImagepath) noexcept;
    void setImagepathToNull() noexcept;

    /**  For column thumbnailPath  */
    ///Get the value of the column thumbnailPath, returns the default value if the column is null
    const std::string &getValueOfThumbnailpath() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getThumbnailpath() const noexcept;
    ///Set the value of the column thumbnailPath
    void setThumbnailpath(const std::string &pThumbnailpath) noexcept;
    void setThumbnailpath(std::string &&pThumbnailpath) noexcept;
    void setThumbnailpathToNull() noexcept;

    /**  For column createdAt  */
    ///Get the value of the column createdAt, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedat() const noexcept;
    ///Set the value of the column createdAt
    void setCreatedat(const ::trantor::Date &pCreatedat) noexcept;

    /**  For column updatedAt  */
    ///Get the value of the column updatedAt, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedat() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedat() const noexcept;
    ///Set the value of the column updatedAt
    void setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept;


    static size_t getColumnNumber() noexcept {  return 16;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<MasterCustomers>;
    friend drogon::orm::BaseBuilder<MasterCustomers, true, true>;
    friend drogon::orm::BaseBuilder<MasterCustomers, true, false>;
    friend drogon::orm::BaseBuilder<MasterCustomers, false, true>;
    friend drogon::orm::BaseBuilder<MasterCustomers, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<MasterCustomers>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<int32_t> id_;
    std::shared_ptr<std::string> firstname_;
    std::shared_ptr<std::string> lastname_;
    std::shared_ptr<std::string> username_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<std::string> phonenumber_;
    std::shared_ptr<std::string> addressdetail_;
    std::shared_ptr<std::string> latitude_;
    std::shared_ptr<std::string> longitude_;
    std::shared_ptr<std::string> password_;
    std::shared_ptr<std::string> token_;
    std::shared_ptr<int8_t> isactive_;
    std::shared_ptr<std::string> imagepath_;
    std::shared_ptr<std::string> thumbnailpath_;
    std::shared_ptr<::trantor::Date> createdat_;
    std::shared_ptr<::trantor::Date> updatedat_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[16]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "firstname,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "lastname,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "username,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "email,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "phoneNumber,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "addressDetail,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "latitude,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "longitude,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "password,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "token,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "isActive,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "imagePath,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "thumbnailPath,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "createdAt,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "updatedAt,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace gaboot
} // namespace drogon_model
