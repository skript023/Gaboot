/**
 *
 *  MasterCustomers.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MasterCustomers.h"
#include "Carts.h"
#include "Orders.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::gaboot;

const std::string MasterCustomers::Cols::_id = "id";
const std::string MasterCustomers::Cols::_firstname = "firstname";
const std::string MasterCustomers::Cols::_lastname = "lastname";
const std::string MasterCustomers::Cols::_username = "username";
const std::string MasterCustomers::Cols::_email = "email";
const std::string MasterCustomers::Cols::_phonenumber = "phonenumber";
const std::string MasterCustomers::Cols::_addressdetail = "addressdetail";
const std::string MasterCustomers::Cols::_latitude = "latitude";
const std::string MasterCustomers::Cols::_longitude = "longitude";
const std::string MasterCustomers::Cols::_password = "password";
const std::string MasterCustomers::Cols::_token = "token";
const std::string MasterCustomers::Cols::_isactive = "isactive";
const std::string MasterCustomers::Cols::_imgpath = "imgpath";
const std::string MasterCustomers::Cols::_imgthumbpath = "imgthumbpath";
const std::string MasterCustomers::Cols::_createdat = "createdat";
const std::string MasterCustomers::Cols::_updatedat = "updatedat";
const std::string MasterCustomers::primaryKeyName = "id";
const bool MasterCustomers::hasPrimaryKey = true;
const std::string MasterCustomers::tableName = "master_customers";

const std::vector<typename MasterCustomers::MetaData> MasterCustomers::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"firstname","std::string","character varying",50,0,0,1},
{"lastname","std::string","character varying",50,0,0,1},
{"username","std::string","character varying",50,0,0,1},
{"email","std::string","character varying",100,0,0,1},
{"phonenumber","std::string","character varying",20,0,0,1},
{"addressdetail","std::string","text",0,0,0,1},
{"latitude","double","double precision",8,0,0,0},
{"longitude","double","double precision",8,0,0,0},
{"password","std::string","character varying",255,0,0,1},
{"token","std::string","character varying",255,0,0,0},
{"isactive","bool","boolean",1,0,0,1},
{"imgpath","std::string","character varying",255,0,0,0},
{"imgthumbpath","std::string","character varying",255,0,0,0},
{"createdat","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updatedat","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &MasterCustomers::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
MasterCustomers::MasterCustomers(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["firstname"].isNull())
        {
            firstname_=std::make_shared<std::string>(r["firstname"].as<std::string>());
        }
        if(!r["lastname"].isNull())
        {
            lastname_=std::make_shared<std::string>(r["lastname"].as<std::string>());
        }
        if(!r["username"].isNull())
        {
            username_=std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["phonenumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(r["phonenumber"].as<std::string>());
        }
        if(!r["addressdetail"].isNull())
        {
            addressdetail_=std::make_shared<std::string>(r["addressdetail"].as<std::string>());
        }
        if(!r["latitude"].isNull())
        {
            latitude_=std::make_shared<double>(r["latitude"].as<double>());
        }
        if(!r["longitude"].isNull())
        {
            longitude_=std::make_shared<double>(r["longitude"].as<double>());
        }
        if(!r["password"].isNull())
        {
            password_=std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if(!r["token"].isNull())
        {
            token_=std::make_shared<std::string>(r["token"].as<std::string>());
        }
        if(!r["isactive"].isNull())
        {
            isactive_=std::make_shared<bool>(r["isactive"].as<bool>());
        }
        if(!r["imgpath"].isNull())
        {
            imgpath_=std::make_shared<std::string>(r["imgpath"].as<std::string>());
        }
        if(!r["imgthumbpath"].isNull())
        {
            imgthumbpath_=std::make_shared<std::string>(r["imgthumbpath"].as<std::string>());
        }
        if(!r["createdat"].isNull())
        {
            auto timeStr = r["createdat"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updatedat"].isNull())
        {
            auto timeStr = r["updatedat"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 16 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            firstname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            lastname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            phonenumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            addressdetail_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            latitude_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            longitude_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            password_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            token_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            isactive_=std::make_shared<bool>(r[index].as<bool>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            imgpath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            imgthumbpath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

MasterCustomers::MasterCustomers(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            addressdetail_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            latitude_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            longitude_=std::make_shared<double>(pJson[pMasqueradingVector[8]].asDouble());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            token_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isactive_=std::make_shared<bool>(pJson[pMasqueradingVector[11]].asBool());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            imgpath_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            imgthumbpath_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

MasterCustomers::MasterCustomers(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("firstname"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["firstname"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["firstname"].asString());
        }
    }
    if(pJson.isMember("lastname"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["lastname"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["lastname"].asString());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("phonenumber"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["phonenumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson["phonenumber"].asString());
        }
    }
    if(pJson.isMember("addressdetail"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["addressdetail"].isNull())
        {
            addressdetail_=std::make_shared<std::string>(pJson["addressdetail"].asString());
        }
    }
    if(pJson.isMember("latitude"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["latitude"].isNull())
        {
            latitude_=std::make_shared<double>(pJson["latitude"].asDouble());
        }
    }
    if(pJson.isMember("longitude"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["longitude"].isNull())
        {
            longitude_=std::make_shared<double>(pJson["longitude"].asDouble());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("token"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["token"].isNull())
        {
            token_=std::make_shared<std::string>(pJson["token"].asString());
        }
    }
    if(pJson.isMember("isactive"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["isactive"].isNull())
        {
            isactive_=std::make_shared<bool>(pJson["isactive"].asBool());
        }
    }
    if(pJson.isMember("imgpath"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["imgpath"].isNull())
        {
            imgpath_=std::make_shared<std::string>(pJson["imgpath"].asString());
        }
    }
    if(pJson.isMember("imgthumbpath"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["imgthumbpath"].isNull())
        {
            imgthumbpath_=std::make_shared<std::string>(pJson["imgthumbpath"].asString());
        }
    }
    if(pJson.isMember("createdat"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["createdat"].isNull())
        {
            auto timeStr = pJson["createdat"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedat"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["updatedat"].isNull())
        {
            auto timeStr = pJson["updatedat"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void MasterCustomers::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            addressdetail_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            latitude_=std::make_shared<double>(pJson[pMasqueradingVector[7]].asDouble());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            longitude_=std::make_shared<double>(pJson[pMasqueradingVector[8]].asDouble());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            token_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            isactive_=std::make_shared<bool>(pJson[pMasqueradingVector[11]].asBool());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            imgpath_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            imgthumbpath_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void MasterCustomers::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("firstname"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["firstname"].isNull())
        {
            firstname_=std::make_shared<std::string>(pJson["firstname"].asString());
        }
    }
    if(pJson.isMember("lastname"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["lastname"].isNull())
        {
            lastname_=std::make_shared<std::string>(pJson["lastname"].asString());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("phonenumber"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["phonenumber"].isNull())
        {
            phonenumber_=std::make_shared<std::string>(pJson["phonenumber"].asString());
        }
    }
    if(pJson.isMember("addressdetail"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["addressdetail"].isNull())
        {
            addressdetail_=std::make_shared<std::string>(pJson["addressdetail"].asString());
        }
    }
    if(pJson.isMember("latitude"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["latitude"].isNull())
        {
            latitude_=std::make_shared<double>(pJson["latitude"].asDouble());
        }
    }
    if(pJson.isMember("longitude"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["longitude"].isNull())
        {
            longitude_=std::make_shared<double>(pJson["longitude"].asDouble());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("token"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["token"].isNull())
        {
            token_=std::make_shared<std::string>(pJson["token"].asString());
        }
    }
    if(pJson.isMember("isactive"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["isactive"].isNull())
        {
            isactive_=std::make_shared<bool>(pJson["isactive"].asBool());
        }
    }
    if(pJson.isMember("imgpath"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["imgpath"].isNull())
        {
            imgpath_=std::make_shared<std::string>(pJson["imgpath"].asString());
        }
    }
    if(pJson.isMember("imgthumbpath"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["imgthumbpath"].isNull())
        {
            imgthumbpath_=std::make_shared<std::string>(pJson["imgthumbpath"].asString());
        }
    }
    if(pJson.isMember("createdat"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["createdat"].isNull())
        {
            auto timeStr = pJson["createdat"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedat"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["updatedat"].isNull())
        {
            auto timeStr = pJson["updatedat"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &MasterCustomers::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MasterCustomers::getId() const noexcept
{
    return id_;
}
void MasterCustomers::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename MasterCustomers::PrimaryKeyType & MasterCustomers::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &MasterCustomers::getValueOfFirstname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(firstname_)
        return *firstname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getFirstname() const noexcept
{
    return firstname_;
}
void MasterCustomers::setFirstname(const std::string &pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(pFirstname);
    dirtyFlag_[1] = true;
}
void MasterCustomers::setFirstname(std::string &&pFirstname) noexcept
{
    firstname_ = std::make_shared<std::string>(std::move(pFirstname));
    dirtyFlag_[1] = true;
}

const std::string &MasterCustomers::getValueOfLastname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(lastname_)
        return *lastname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getLastname() const noexcept
{
    return lastname_;
}
void MasterCustomers::setLastname(const std::string &pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(pLastname);
    dirtyFlag_[2] = true;
}
void MasterCustomers::setLastname(std::string &&pLastname) noexcept
{
    lastname_ = std::make_shared<std::string>(std::move(pLastname));
    dirtyFlag_[2] = true;
}

const std::string &MasterCustomers::getValueOfUsername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getUsername() const noexcept
{
    return username_;
}
void MasterCustomers::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[3] = true;
}
void MasterCustomers::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[3] = true;
}

const std::string &MasterCustomers::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getEmail() const noexcept
{
    return email_;
}
void MasterCustomers::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[4] = true;
}
void MasterCustomers::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[4] = true;
}

const std::string &MasterCustomers::getValueOfPhonenumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(phonenumber_)
        return *phonenumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getPhonenumber() const noexcept
{
    return phonenumber_;
}
void MasterCustomers::setPhonenumber(const std::string &pPhonenumber) noexcept
{
    phonenumber_ = std::make_shared<std::string>(pPhonenumber);
    dirtyFlag_[5] = true;
}
void MasterCustomers::setPhonenumber(std::string &&pPhonenumber) noexcept
{
    phonenumber_ = std::make_shared<std::string>(std::move(pPhonenumber));
    dirtyFlag_[5] = true;
}

const std::string &MasterCustomers::getValueOfAddressdetail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(addressdetail_)
        return *addressdetail_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getAddressdetail() const noexcept
{
    return addressdetail_;
}
void MasterCustomers::setAddressdetail(const std::string &pAddressdetail) noexcept
{
    addressdetail_ = std::make_shared<std::string>(pAddressdetail);
    dirtyFlag_[6] = true;
}
void MasterCustomers::setAddressdetail(std::string &&pAddressdetail) noexcept
{
    addressdetail_ = std::make_shared<std::string>(std::move(pAddressdetail));
    dirtyFlag_[6] = true;
}

const double &MasterCustomers::getValueOfLatitude() const noexcept
{
    const static double defaultValue = double();
    if(latitude_)
        return *latitude_;
    return defaultValue;
}
const std::shared_ptr<double> &MasterCustomers::getLatitude() const noexcept
{
    return latitude_;
}
void MasterCustomers::setLatitude(const double &pLatitude) noexcept
{
    latitude_ = std::make_shared<double>(pLatitude);
    dirtyFlag_[7] = true;
}
void MasterCustomers::setLatitudeToNull() noexcept
{
    latitude_.reset();
    dirtyFlag_[7] = true;
}

const double &MasterCustomers::getValueOfLongitude() const noexcept
{
    const static double defaultValue = double();
    if(longitude_)
        return *longitude_;
    return defaultValue;
}
const std::shared_ptr<double> &MasterCustomers::getLongitude() const noexcept
{
    return longitude_;
}
void MasterCustomers::setLongitude(const double &pLongitude) noexcept
{
    longitude_ = std::make_shared<double>(pLongitude);
    dirtyFlag_[8] = true;
}
void MasterCustomers::setLongitudeToNull() noexcept
{
    longitude_.reset();
    dirtyFlag_[8] = true;
}

const std::string &MasterCustomers::getValueOfPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(password_)
        return *password_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getPassword() const noexcept
{
    return password_;
}
void MasterCustomers::setPassword(const std::string &pPassword) noexcept
{
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[9] = true;
}
void MasterCustomers::setPassword(std::string &&pPassword) noexcept
{
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[9] = true;
}

const std::string &MasterCustomers::getValueOfToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(token_)
        return *token_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getToken() const noexcept
{
    return token_;
}
void MasterCustomers::setToken(const std::string &pToken) noexcept
{
    token_ = std::make_shared<std::string>(pToken);
    dirtyFlag_[10] = true;
}
void MasterCustomers::setToken(std::string &&pToken) noexcept
{
    token_ = std::make_shared<std::string>(std::move(pToken));
    dirtyFlag_[10] = true;
}
void MasterCustomers::setTokenToNull() noexcept
{
    token_.reset();
    dirtyFlag_[10] = true;
}

const bool &MasterCustomers::getValueOfIsactive() const noexcept
{
    const static bool defaultValue = bool();
    if(isactive_)
        return *isactive_;
    return defaultValue;
}
const std::shared_ptr<bool> &MasterCustomers::getIsactive() const noexcept
{
    return isactive_;
}
void MasterCustomers::setIsactive(const bool &pIsactive) noexcept
{
    isactive_ = std::make_shared<bool>(pIsactive);
    dirtyFlag_[11] = true;
}

const std::string &MasterCustomers::getValueOfImgpath() const noexcept
{
    const static std::string defaultValue = std::string();
    if(imgpath_)
        return *imgpath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getImgpath() const noexcept
{
    return imgpath_;
}
void MasterCustomers::setImgpath(const std::string &pImgpath) noexcept
{
    imgpath_ = std::make_shared<std::string>(pImgpath);
    dirtyFlag_[12] = true;
}
void MasterCustomers::setImgpath(std::string &&pImgpath) noexcept
{
    imgpath_ = std::make_shared<std::string>(std::move(pImgpath));
    dirtyFlag_[12] = true;
}
void MasterCustomers::setImgpathToNull() noexcept
{
    imgpath_.reset();
    dirtyFlag_[12] = true;
}

const std::string &MasterCustomers::getValueOfImgthumbpath() const noexcept
{
    const static std::string defaultValue = std::string();
    if(imgthumbpath_)
        return *imgthumbpath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterCustomers::getImgthumbpath() const noexcept
{
    return imgthumbpath_;
}
void MasterCustomers::setImgthumbpath(const std::string &pImgthumbpath) noexcept
{
    imgthumbpath_ = std::make_shared<std::string>(pImgthumbpath);
    dirtyFlag_[13] = true;
}
void MasterCustomers::setImgthumbpath(std::string &&pImgthumbpath) noexcept
{
    imgthumbpath_ = std::make_shared<std::string>(std::move(pImgthumbpath));
    dirtyFlag_[13] = true;
}
void MasterCustomers::setImgthumbpathToNull() noexcept
{
    imgthumbpath_.reset();
    dirtyFlag_[13] = true;
}

const ::trantor::Date &MasterCustomers::getValueOfCreatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdat_)
        return *createdat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MasterCustomers::getCreatedat() const noexcept
{
    return createdat_;
}
void MasterCustomers::setCreatedat(const ::trantor::Date &pCreatedat) noexcept
{
    createdat_ = std::make_shared<::trantor::Date>(pCreatedat);
    dirtyFlag_[14] = true;
}

const ::trantor::Date &MasterCustomers::getValueOfUpdatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedat_)
        return *updatedat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MasterCustomers::getUpdatedat() const noexcept
{
    return updatedat_;
}
void MasterCustomers::setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept
{
    updatedat_ = std::make_shared<::trantor::Date>(pUpdatedat);
    dirtyFlag_[15] = true;
}

void MasterCustomers::updateId(const uint64_t id)
{
}

const std::vector<std::string> &MasterCustomers::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "firstname",
        "lastname",
        "username",
        "email",
        "phonenumber",
        "addressdetail",
        "latitude",
        "longitude",
        "password",
        "token",
        "isactive",
        "imgpath",
        "imgthumbpath",
        "createdat",
        "updatedat"
    };
    return inCols;
}

void MasterCustomers::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPhonenumber())
        {
            binder << getValueOfPhonenumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAddressdetail())
        {
            binder << getValueOfAddressdetail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getLatitude())
        {
            binder << getValueOfLatitude();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getLongitude())
        {
            binder << getValueOfLongitude();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsactive())
        {
            binder << getValueOfIsactive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getImgpath())
        {
            binder << getValueOfImgpath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getImgthumbpath())
        {
            binder << getValueOfImgthumbpath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> MasterCustomers::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    return ret;
}

void MasterCustomers::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFirstname())
        {
            binder << getValueOfFirstname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLastname())
        {
            binder << getValueOfLastname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getPhonenumber())
        {
            binder << getValueOfPhonenumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getAddressdetail())
        {
            binder << getValueOfAddressdetail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getLatitude())
        {
            binder << getValueOfLatitude();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getLongitude())
        {
            binder << getValueOfLongitude();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getToken())
        {
            binder << getValueOfToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getIsactive())
        {
            binder << getValueOfIsactive();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getImgpath())
        {
            binder << getValueOfImgpath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getImgthumbpath())
        {
            binder << getValueOfImgthumbpath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MasterCustomers::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["firstname"]=getValueOfFirstname();
    }
    else
    {
        ret["firstname"]=Json::Value();
    }
    if(getLastname())
    {
        ret["lastname"]=getValueOfLastname();
    }
    else
    {
        ret["lastname"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getPhonenumber())
    {
        ret["phonenumber"]=getValueOfPhonenumber();
    }
    else
    {
        ret["phonenumber"]=Json::Value();
    }
    if(getAddressdetail())
    {
        ret["addressdetail"]=getValueOfAddressdetail();
    }
    else
    {
        ret["addressdetail"]=Json::Value();
    }
    if(getLatitude())
    {
        ret["latitude"]=getValueOfLatitude();
    }
    else
    {
        ret["latitude"]=Json::Value();
    }
    if(getLongitude())
    {
        ret["longitude"]=getValueOfLongitude();
    }
    else
    {
        ret["longitude"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getIsactive())
    {
        ret["isactive"]=getValueOfIsactive();
    }
    else
    {
        ret["isactive"]=Json::Value();
    }
    if(getImgpath())
    {
        ret["imgpath"]=getValueOfImgpath();
    }
    else
    {
        ret["imgpath"]=Json::Value();
    }
    if(getImgthumbpath())
    {
        ret["imgthumbpath"]=getValueOfImgthumbpath();
    }
    else
    {
        ret["imgthumbpath"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdat"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdat"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedat"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedat"]=Json::Value();
    }
    return ret;
}

Json::Value MasterCustomers::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 16)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFirstname())
            {
                ret[pMasqueradingVector[1]]=getValueOfFirstname();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLastname())
            {
                ret[pMasqueradingVector[2]]=getValueOfLastname();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[3]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[4]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getPhonenumber())
            {
                ret[pMasqueradingVector[5]]=getValueOfPhonenumber();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getAddressdetail())
            {
                ret[pMasqueradingVector[6]]=getValueOfAddressdetail();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getLatitude())
            {
                ret[pMasqueradingVector[7]]=getValueOfLatitude();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getLongitude())
            {
                ret[pMasqueradingVector[8]]=getValueOfLongitude();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[9]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getToken())
            {
                ret[pMasqueradingVector[10]]=getValueOfToken();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getIsactive())
            {
                ret[pMasqueradingVector[11]]=getValueOfIsactive();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getImgpath())
            {
                ret[pMasqueradingVector[12]]=getValueOfImgpath();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getImgthumbpath())
            {
                ret[pMasqueradingVector[13]]=getValueOfImgthumbpath();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getCreatedat())
            {
                ret[pMasqueradingVector[14]]=getCreatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getUpdatedat())
            {
                ret[pMasqueradingVector[15]]=getUpdatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFirstname())
    {
        ret["firstname"]=getValueOfFirstname();
    }
    else
    {
        ret["firstname"]=Json::Value();
    }
    if(getLastname())
    {
        ret["lastname"]=getValueOfLastname();
    }
    else
    {
        ret["lastname"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getPhonenumber())
    {
        ret["phonenumber"]=getValueOfPhonenumber();
    }
    else
    {
        ret["phonenumber"]=Json::Value();
    }
    if(getAddressdetail())
    {
        ret["addressdetail"]=getValueOfAddressdetail();
    }
    else
    {
        ret["addressdetail"]=Json::Value();
    }
    if(getLatitude())
    {
        ret["latitude"]=getValueOfLatitude();
    }
    else
    {
        ret["latitude"]=Json::Value();
    }
    if(getLongitude())
    {
        ret["longitude"]=getValueOfLongitude();
    }
    else
    {
        ret["longitude"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getToken())
    {
        ret["token"]=getValueOfToken();
    }
    else
    {
        ret["token"]=Json::Value();
    }
    if(getIsactive())
    {
        ret["isactive"]=getValueOfIsactive();
    }
    else
    {
        ret["isactive"]=Json::Value();
    }
    if(getImgpath())
    {
        ret["imgpath"]=getValueOfImgpath();
    }
    else
    {
        ret["imgpath"]=Json::Value();
    }
    if(getImgthumbpath())
    {
        ret["imgthumbpath"]=getValueOfImgthumbpath();
    }
    else
    {
        ret["imgthumbpath"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdat"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdat"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedat"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedat"]=Json::Value();
    }
    return ret;
}

bool MasterCustomers::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("firstname"))
    {
        if(!validJsonOfField(1, "firstname", pJson["firstname"], err, true))
            return false;
    }
    else
    {
        err="The firstname column cannot be null";
        return false;
    }
    if(pJson.isMember("lastname"))
    {
        if(!validJsonOfField(2, "lastname", pJson["lastname"], err, true))
            return false;
    }
    else
    {
        err="The lastname column cannot be null";
        return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(3, "username", pJson["username"], err, true))
            return false;
    }
    else
    {
        err="The username column cannot be null";
        return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(4, "email", pJson["email"], err, true))
            return false;
    }
    else
    {
        err="The email column cannot be null";
        return false;
    }
    if(pJson.isMember("phonenumber"))
    {
        if(!validJsonOfField(5, "phonenumber", pJson["phonenumber"], err, true))
            return false;
    }
    else
    {
        err="The phonenumber column cannot be null";
        return false;
    }
    if(pJson.isMember("addressdetail"))
    {
        if(!validJsonOfField(6, "addressdetail", pJson["addressdetail"], err, true))
            return false;
    }
    else
    {
        err="The addressdetail column cannot be null";
        return false;
    }
    if(pJson.isMember("latitude"))
    {
        if(!validJsonOfField(7, "latitude", pJson["latitude"], err, true))
            return false;
    }
    if(pJson.isMember("longitude"))
    {
        if(!validJsonOfField(8, "longitude", pJson["longitude"], err, true))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(9, "password", pJson["password"], err, true))
            return false;
    }
    else
    {
        err="The password column cannot be null";
        return false;
    }
    if(pJson.isMember("token"))
    {
        if(!validJsonOfField(10, "token", pJson["token"], err, true))
            return false;
    }
    if(pJson.isMember("isactive"))
    {
        if(!validJsonOfField(11, "isactive", pJson["isactive"], err, true))
            return false;
    }
    if(pJson.isMember("imgpath"))
    {
        if(!validJsonOfField(12, "imgpath", pJson["imgpath"], err, true))
            return false;
    }
    if(pJson.isMember("imgthumbpath"))
    {
        if(!validJsonOfField(13, "imgthumbpath", pJson["imgthumbpath"], err, true))
            return false;
    }
    if(pJson.isMember("createdat"))
    {
        if(!validJsonOfField(14, "createdat", pJson["createdat"], err, true))
            return false;
    }
    if(pJson.isMember("updatedat"))
    {
        if(!validJsonOfField(15, "updatedat", pJson["updatedat"], err, true))
            return false;
    }
    return true;
}
bool MasterCustomers::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MasterCustomers::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("firstname"))
    {
        if(!validJsonOfField(1, "firstname", pJson["firstname"], err, false))
            return false;
    }
    if(pJson.isMember("lastname"))
    {
        if(!validJsonOfField(2, "lastname", pJson["lastname"], err, false))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(3, "username", pJson["username"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(4, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("phonenumber"))
    {
        if(!validJsonOfField(5, "phonenumber", pJson["phonenumber"], err, false))
            return false;
    }
    if(pJson.isMember("addressdetail"))
    {
        if(!validJsonOfField(6, "addressdetail", pJson["addressdetail"], err, false))
            return false;
    }
    if(pJson.isMember("latitude"))
    {
        if(!validJsonOfField(7, "latitude", pJson["latitude"], err, false))
            return false;
    }
    if(pJson.isMember("longitude"))
    {
        if(!validJsonOfField(8, "longitude", pJson["longitude"], err, false))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(9, "password", pJson["password"], err, false))
            return false;
    }
    if(pJson.isMember("token"))
    {
        if(!validJsonOfField(10, "token", pJson["token"], err, false))
            return false;
    }
    if(pJson.isMember("isactive"))
    {
        if(!validJsonOfField(11, "isactive", pJson["isactive"], err, false))
            return false;
    }
    if(pJson.isMember("imgpath"))
    {
        if(!validJsonOfField(12, "imgpath", pJson["imgpath"], err, false))
            return false;
    }
    if(pJson.isMember("imgthumbpath"))
    {
        if(!validJsonOfField(13, "imgthumbpath", pJson["imgthumbpath"], err, false))
            return false;
    }
    if(pJson.isMember("createdat"))
    {
        if(!validJsonOfField(14, "createdat", pJson["createdat"], err, false))
            return false;
    }
    if(pJson.isMember("updatedat"))
    {
        if(!validJsonOfField(15, "updatedat", pJson["updatedat"], err, false))
            return false;
    }
    return true;
}
bool MasterCustomers::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MasterCustomers::validJsonOfField(size_t index,
                                       const std::string &fieldName,
                                       const Json::Value &pJson,
                                       std::string &err,
                                       bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 50)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 50)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 20)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 20)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}

Carts MasterCustomers::getCarts(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<Carts>> pro(new std::promise<Carts>);
    std::future<Carts> f = pro->get_future();
    getCarts(clientPtr, [&pro] (Carts result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void MasterCustomers::getCarts(const DbClientPtr &clientPtr,
                               const std::function<void(Carts)> &rcb,
                               const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from carts where customerId = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Carts(r[0]));
                    }
               }
               >> ecb;
}

Orders MasterCustomers::getOrders(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<Orders>> pro(new std::promise<Orders>);
    std::future<Orders> f = pro->get_future();
    getOrders(clientPtr, [&pro] (Orders result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void MasterCustomers::getOrders(const DbClientPtr &clientPtr,
                                const std::function<void(Orders)> &rcb,
                                const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from orders where customerId = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Orders(r[0]));
                    }
               }
               >> ecb;
}
