/**
 *
 *  OrderDetails.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "OrderDetails.h"
#include "Orders.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::gaboot;

const std::string OrderDetails::Cols::_id = "id";
const std::string OrderDetails::Cols::_orderId = "orderId";
const std::string OrderDetails::Cols::_productId = "productId";
const std::string OrderDetails::Cols::_price = "price";
const std::string OrderDetails::Cols::_discount = "discount";
const std::string OrderDetails::Cols::_quantity = "quantity";
const std::string OrderDetails::Cols::_total = "total";
const std::string OrderDetails::Cols::_createdAt = "createdAt";
const std::string OrderDetails::Cols::_updatedAt = "updatedAt";
const std::string OrderDetails::primaryKeyName = "id";
const bool OrderDetails::hasPrimaryKey = true;
const std::string OrderDetails::tableName = "order_details";

const std::vector<typename OrderDetails::MetaData> OrderDetails::metaData_={
{"id","int32_t","int(11)",4,1,1,1},
{"orderId","int32_t","int(11)",4,0,0,1},
{"productId","int32_t","int(11)",4,0,0,1},
{"price","double","double",8,0,0,1},
{"discount","double","double",8,0,0,1},
{"quantity","int32_t","int(11)",4,0,0,1},
{"total","double","double",8,0,0,1},
{"createdAt","::trantor::Date","datetime",0,0,0,1},
{"updatedAt","::trantor::Date","datetime",0,0,0,1}
};
const std::string &OrderDetails::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
OrderDetails::OrderDetails(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["orderId"].isNull())
        {
            orderid_=std::make_shared<int32_t>(r["orderId"].as<int32_t>());
        }
        if(!r["productId"].isNull())
        {
            productid_=std::make_shared<int32_t>(r["productId"].as<int32_t>());
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<double>(r["price"].as<double>());
        }
        if(!r["discount"].isNull())
        {
            discount_=std::make_shared<double>(r["discount"].as<double>());
        }
        if(!r["quantity"].isNull())
        {
            quantity_=std::make_shared<int32_t>(r["quantity"].as<int32_t>());
        }
        if(!r["total"].isNull())
        {
            total_=std::make_shared<double>(r["total"].as<double>());
        }
        if(!r["createdAt"].isNull())
        {
            auto timeStr = r["createdAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updatedAt"].isNull())
        {
            auto timeStr = r["updatedAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            orderid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            productid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            price_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            discount_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            quantity_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            total_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

OrderDetails::OrderDetails(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            orderid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            productid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            price_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            discount_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            quantity_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            total_=std::make_shared<double>(pJson[pMasqueradingVector[6]].asDouble());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

OrderDetails::OrderDetails(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("orderId"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["orderId"].isNull())
        {
            orderid_=std::make_shared<int32_t>((int32_t)pJson["orderId"].asInt64());
        }
    }
    if(pJson.isMember("productId"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["productId"].isNull())
        {
            productid_=std::make_shared<int32_t>((int32_t)pJson["productId"].asInt64());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<double>(pJson["price"].asDouble());
        }
    }
    if(pJson.isMember("discount"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["discount"].isNull())
        {
            discount_=std::make_shared<double>(pJson["discount"].asDouble());
        }
    }
    if(pJson.isMember("quantity"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["quantity"].isNull())
        {
            quantity_=std::make_shared<int32_t>((int32_t)pJson["quantity"].asInt64());
        }
    }
    if(pJson.isMember("total"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["total"].isNull())
        {
            total_=std::make_shared<double>(pJson["total"].asDouble());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void OrderDetails::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            orderid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            productid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            price_=std::make_shared<double>(pJson[pMasqueradingVector[3]].asDouble());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            discount_=std::make_shared<double>(pJson[pMasqueradingVector[4]].asDouble());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            quantity_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            total_=std::make_shared<double>(pJson[pMasqueradingVector[6]].asDouble());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[8]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void OrderDetails::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("orderId"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["orderId"].isNull())
        {
            orderid_=std::make_shared<int32_t>((int32_t)pJson["orderId"].asInt64());
        }
    }
    if(pJson.isMember("productId"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["productId"].isNull())
        {
            productid_=std::make_shared<int32_t>((int32_t)pJson["productId"].asInt64());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<double>(pJson["price"].asDouble());
        }
    }
    if(pJson.isMember("discount"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["discount"].isNull())
        {
            discount_=std::make_shared<double>(pJson["discount"].asDouble());
        }
    }
    if(pJson.isMember("quantity"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["quantity"].isNull())
        {
            quantity_=std::make_shared<int32_t>((int32_t)pJson["quantity"].asInt64());
        }
    }
    if(pJson.isMember("total"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["total"].isNull())
        {
            total_=std::make_shared<double>(pJson["total"].asDouble());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &OrderDetails::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OrderDetails::getId() const noexcept
{
    return id_;
}
void OrderDetails::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename OrderDetails::PrimaryKeyType & OrderDetails::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &OrderDetails::getValueOfOrderid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(orderid_)
        return *orderid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OrderDetails::getOrderid() const noexcept
{
    return orderid_;
}
void OrderDetails::setOrderid(const int32_t &pOrderid) noexcept
{
    orderid_ = std::make_shared<int32_t>(pOrderid);
    dirtyFlag_[1] = true;
}

const int32_t &OrderDetails::getValueOfProductid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(productid_)
        return *productid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OrderDetails::getProductid() const noexcept
{
    return productid_;
}
void OrderDetails::setProductid(const int32_t &pProductid) noexcept
{
    productid_ = std::make_shared<int32_t>(pProductid);
    dirtyFlag_[2] = true;
}

const double &OrderDetails::getValueOfPrice() const noexcept
{
    const static double defaultValue = double();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<double> &OrderDetails::getPrice() const noexcept
{
    return price_;
}
void OrderDetails::setPrice(const double &pPrice) noexcept
{
    price_ = std::make_shared<double>(pPrice);
    dirtyFlag_[3] = true;
}

const double &OrderDetails::getValueOfDiscount() const noexcept
{
    const static double defaultValue = double();
    if(discount_)
        return *discount_;
    return defaultValue;
}
const std::shared_ptr<double> &OrderDetails::getDiscount() const noexcept
{
    return discount_;
}
void OrderDetails::setDiscount(const double &pDiscount) noexcept
{
    discount_ = std::make_shared<double>(pDiscount);
    dirtyFlag_[4] = true;
}

const int32_t &OrderDetails::getValueOfQuantity() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(quantity_)
        return *quantity_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &OrderDetails::getQuantity() const noexcept
{
    return quantity_;
}
void OrderDetails::setQuantity(const int32_t &pQuantity) noexcept
{
    quantity_ = std::make_shared<int32_t>(pQuantity);
    dirtyFlag_[5] = true;
}

const double &OrderDetails::getValueOfTotal() const noexcept
{
    const static double defaultValue = double();
    if(total_)
        return *total_;
    return defaultValue;
}
const std::shared_ptr<double> &OrderDetails::getTotal() const noexcept
{
    return total_;
}
void OrderDetails::setTotal(const double &pTotal) noexcept
{
    total_ = std::make_shared<double>(pTotal);
    dirtyFlag_[6] = true;
}

const ::trantor::Date &OrderDetails::getValueOfCreatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdat_)
        return *createdat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OrderDetails::getCreatedat() const noexcept
{
    return createdat_;
}
void OrderDetails::setCreatedat(const ::trantor::Date &pCreatedat) noexcept
{
    createdat_ = std::make_shared<::trantor::Date>(pCreatedat);
    dirtyFlag_[7] = true;
}

const ::trantor::Date &OrderDetails::getValueOfUpdatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedat_)
        return *updatedat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &OrderDetails::getUpdatedat() const noexcept
{
    return updatedat_;
}
void OrderDetails::setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept
{
    updatedat_ = std::make_shared<::trantor::Date>(pUpdatedat);
    dirtyFlag_[8] = true;
}

void OrderDetails::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &OrderDetails::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "orderId",
        "productId",
        "price",
        "discount",
        "quantity",
        "total",
        "createdAt",
        "updatedAt"
    };
    return inCols;
}

void OrderDetails::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getOrderid())
        {
            binder << getValueOfOrderid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getProductid())
        {
            binder << getValueOfProductid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDiscount())
        {
            binder << getValueOfDiscount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getQuantity())
        {
            binder << getValueOfQuantity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTotal())
        {
            binder << getValueOfTotal();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> OrderDetails::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void OrderDetails::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getOrderid())
        {
            binder << getValueOfOrderid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getProductid())
        {
            binder << getValueOfProductid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDiscount())
        {
            binder << getValueOfDiscount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getQuantity())
        {
            binder << getValueOfQuantity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTotal())
        {
            binder << getValueOfTotal();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value OrderDetails::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getOrderid())
    {
        ret["orderId"]=getValueOfOrderid();
    }
    else
    {
        ret["orderId"]=Json::Value();
    }
    if(getProductid())
    {
        ret["productId"]=getValueOfProductid();
    }
    else
    {
        ret["productId"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getDiscount())
    {
        ret["discount"]=getValueOfDiscount();
    }
    else
    {
        ret["discount"]=Json::Value();
    }
    if(getQuantity())
    {
        ret["quantity"]=getValueOfQuantity();
    }
    else
    {
        ret["quantity"]=Json::Value();
    }
    if(getTotal())
    {
        ret["total"]=getValueOfTotal();
    }
    else
    {
        ret["total"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

Json::Value OrderDetails::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getOrderid())
            {
                ret[pMasqueradingVector[1]]=getValueOfOrderid();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getProductid())
            {
                ret[pMasqueradingVector[2]]=getValueOfProductid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[3]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDiscount())
            {
                ret[pMasqueradingVector[4]]=getValueOfDiscount();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getQuantity())
            {
                ret[pMasqueradingVector[5]]=getValueOfQuantity();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getTotal())
            {
                ret[pMasqueradingVector[6]]=getValueOfTotal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCreatedat())
            {
                ret[pMasqueradingVector[7]]=getCreatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getUpdatedat())
            {
                ret[pMasqueradingVector[8]]=getUpdatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getOrderid())
    {
        ret["orderId"]=getValueOfOrderid();
    }
    else
    {
        ret["orderId"]=Json::Value();
    }
    if(getProductid())
    {
        ret["productId"]=getValueOfProductid();
    }
    else
    {
        ret["productId"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getDiscount())
    {
        ret["discount"]=getValueOfDiscount();
    }
    else
    {
        ret["discount"]=Json::Value();
    }
    if(getQuantity())
    {
        ret["quantity"]=getValueOfQuantity();
    }
    else
    {
        ret["quantity"]=Json::Value();
    }
    if(getTotal())
    {
        ret["total"]=getValueOfTotal();
    }
    else
    {
        ret["total"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

bool OrderDetails::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("orderId"))
    {
        if(!validJsonOfField(1, "orderId", pJson["orderId"], err, true))
            return false;
    }
    else
    {
        err="The orderId column cannot be null";
        return false;
    }
    if(pJson.isMember("productId"))
    {
        if(!validJsonOfField(2, "productId", pJson["productId"], err, true))
            return false;
    }
    else
    {
        err="The productId column cannot be null";
        return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(3, "price", pJson["price"], err, true))
            return false;
    }
    if(pJson.isMember("discount"))
    {
        if(!validJsonOfField(4, "discount", pJson["discount"], err, true))
            return false;
    }
    if(pJson.isMember("quantity"))
    {
        if(!validJsonOfField(5, "quantity", pJson["quantity"], err, true))
            return false;
    }
    if(pJson.isMember("total"))
    {
        if(!validJsonOfField(6, "total", pJson["total"], err, true))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(7, "createdAt", pJson["createdAt"], err, true))
            return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(8, "updatedAt", pJson["updatedAt"], err, true))
            return false;
    }
    return true;
}
bool OrderDetails::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool OrderDetails::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("orderId"))
    {
        if(!validJsonOfField(1, "orderId", pJson["orderId"], err, false))
            return false;
    }
    if(pJson.isMember("productId"))
    {
        if(!validJsonOfField(2, "productId", pJson["productId"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(3, "price", pJson["price"], err, false))
            return false;
    }
    if(pJson.isMember("discount"))
    {
        if(!validJsonOfField(4, "discount", pJson["discount"], err, false))
            return false;
    }
    if(pJson.isMember("quantity"))
    {
        if(!validJsonOfField(5, "quantity", pJson["quantity"], err, false))
            return false;
    }
    if(pJson.isMember("total"))
    {
        if(!validJsonOfField(6, "total", pJson["total"], err, false))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(7, "createdAt", pJson["createdAt"], err, false))
            return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(8, "updatedAt", pJson["updatedAt"], err, false))
            return false;
    }
    return true;
}
bool OrderDetails::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool OrderDetails::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}

Orders OrderDetails::getOrders(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<Orders>> pro(new std::promise<Orders>);
    std::future<Orders> f = pro->get_future();
    getOrders(clientPtr, [&pro] (Orders result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void OrderDetails::getOrders(const DbClientPtr &clientPtr,
                             const std::function<void(Orders)> &rcb,
                             const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from orders where id = ?";
    *clientPtr << sql
               << *orderid_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Orders(r[0]));
                    }
               }
               >> ecb;
}
