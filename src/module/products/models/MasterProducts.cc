/**
 *
 *  MasterProducts.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MasterProducts.h"
#include "Categories.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::gaboot;

const std::string MasterProducts::Cols::_id = "id";
const std::string MasterProducts::Cols::_name = "name";
const std::string MasterProducts::Cols::_description = "description";
const std::string MasterProducts::Cols::_price = "price";
const std::string MasterProducts::Cols::_stock = "stock";
const std::string MasterProducts::Cols::_dimension = "dimension";
const std::string MasterProducts::Cols::_weight = "weight";
const std::string MasterProducts::Cols::_weightUnit = "weightUnit";
const std::string MasterProducts::Cols::_categoryId = "categoryId";
const std::string MasterProducts::Cols::_wishlistId = "wishlistId";
const std::string MasterProducts::Cols::_createdAt = "createdAt";
const std::string MasterProducts::Cols::_updatedAt = "updatedAt";
const std::string MasterProducts::primaryKeyName = "id";
const bool MasterProducts::hasPrimaryKey = true;
const std::string MasterProducts::tableName = "master_products";

const std::vector<typename MasterProducts::MetaData> MasterProducts::metaData_={
{"id","int32_t","int(11)",4,1,1,1},
{"name","std::string","varchar(255)",255,0,0,0},
{"description","std::string","varchar(255)",255,0,0,0},
{"price","int32_t","int(11)",4,0,0,0},
{"stock","int32_t","int(11)",4,0,0,0},
{"dimension","std::string","varchar(255)",255,0,0,0},
{"weight","int32_t","int(11)",4,0,0,0},
{"weightUnit","std::string","varchar(255)",255,0,0,0},
{"categoryId","int32_t","int(11)",4,0,0,0},
{"wishlistId","int32_t","int(11)",4,0,0,0},
{"createdAt","::trantor::Date","datetime",0,0,0,1},
{"updatedAt","::trantor::Date","datetime",0,0,0,1}
};
const std::string &MasterProducts::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
MasterProducts::MasterProducts(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<int32_t>(r["price"].as<int32_t>());
        }
        if(!r["stock"].isNull())
        {
            stock_=std::make_shared<int32_t>(r["stock"].as<int32_t>());
        }
        if(!r["dimension"].isNull())
        {
            dimension_=std::make_shared<std::string>(r["dimension"].as<std::string>());
        }
        if(!r["weight"].isNull())
        {
            weight_=std::make_shared<int32_t>(r["weight"].as<int32_t>());
        }
        if(!r["weightUnit"].isNull())
        {
            weightunit_=std::make_shared<std::string>(r["weightUnit"].as<std::string>());
        }
        if(!r["categoryId"].isNull())
        {
            categoryid_=std::make_shared<int32_t>(r["categoryId"].as<int32_t>());
        }
        if(!r["wishlistId"].isNull())
        {
            wishlistid_=std::make_shared<int32_t>(r["wishlistId"].as<int32_t>());
        }
        if(!r["createdAt"].isNull())
        {
            auto timeStr = r["createdAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updatedAt"].isNull())
        {
            auto timeStr = r["updatedAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            price_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            stock_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            dimension_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            weight_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            weightunit_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            categoryid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            wishlistid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

MasterProducts::MasterProducts(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            stock_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            dimension_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            weight_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            weightunit_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            categoryid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            wishlistid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

MasterProducts::MasterProducts(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson["price"].asInt64());
        }
    }
    if(pJson.isMember("stock"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["stock"].isNull())
        {
            stock_=std::make_shared<int32_t>((int32_t)pJson["stock"].asInt64());
        }
    }
    if(pJson.isMember("dimension"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["dimension"].isNull())
        {
            dimension_=std::make_shared<std::string>(pJson["dimension"].asString());
        }
    }
    if(pJson.isMember("weight"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["weight"].isNull())
        {
            weight_=std::make_shared<int32_t>((int32_t)pJson["weight"].asInt64());
        }
    }
    if(pJson.isMember("weightUnit"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["weightUnit"].isNull())
        {
            weightunit_=std::make_shared<std::string>(pJson["weightUnit"].asString());
        }
    }
    if(pJson.isMember("categoryId"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["categoryId"].isNull())
        {
            categoryid_=std::make_shared<int32_t>((int32_t)pJson["categoryId"].asInt64());
        }
    }
    if(pJson.isMember("wishlistId"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["wishlistId"].isNull())
        {
            wishlistid_=std::make_shared<int32_t>((int32_t)pJson["wishlistId"].asInt64());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void MasterProducts::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            stock_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            dimension_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            weight_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            weightunit_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            categoryid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            wishlistid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void MasterProducts::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<int32_t>((int32_t)pJson["price"].asInt64());
        }
    }
    if(pJson.isMember("stock"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["stock"].isNull())
        {
            stock_=std::make_shared<int32_t>((int32_t)pJson["stock"].asInt64());
        }
    }
    if(pJson.isMember("dimension"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["dimension"].isNull())
        {
            dimension_=std::make_shared<std::string>(pJson["dimension"].asString());
        }
    }
    if(pJson.isMember("weight"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["weight"].isNull())
        {
            weight_=std::make_shared<int32_t>((int32_t)pJson["weight"].asInt64());
        }
    }
    if(pJson.isMember("weightUnit"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["weightUnit"].isNull())
        {
            weightunit_=std::make_shared<std::string>(pJson["weightUnit"].asString());
        }
    }
    if(pJson.isMember("categoryId"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["categoryId"].isNull())
        {
            categoryid_=std::make_shared<int32_t>((int32_t)pJson["categoryId"].asInt64());
        }
    }
    if(pJson.isMember("wishlistId"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["wishlistId"].isNull())
        {
            wishlistid_=std::make_shared<int32_t>((int32_t)pJson["wishlistId"].asInt64());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &MasterProducts::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MasterProducts::getId() const noexcept
{
    return id_;
}
void MasterProducts::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename MasterProducts::PrimaryKeyType & MasterProducts::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &MasterProducts::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterProducts::getName() const noexcept
{
    return name_;
}
void MasterProducts::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void MasterProducts::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}
void MasterProducts::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[1] = true;
}

const std::string &MasterProducts::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterProducts::getDescription() const noexcept
{
    return description_;
}
void MasterProducts::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[2] = true;
}
void MasterProducts::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[2] = true;
}
void MasterProducts::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[2] = true;
}

const int32_t &MasterProducts::getValueOfPrice() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MasterProducts::getPrice() const noexcept
{
    return price_;
}
void MasterProducts::setPrice(const int32_t &pPrice) noexcept
{
    price_ = std::make_shared<int32_t>(pPrice);
    dirtyFlag_[3] = true;
}
void MasterProducts::setPriceToNull() noexcept
{
    price_.reset();
    dirtyFlag_[3] = true;
}

const int32_t &MasterProducts::getValueOfStock() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(stock_)
        return *stock_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MasterProducts::getStock() const noexcept
{
    return stock_;
}
void MasterProducts::setStock(const int32_t &pStock) noexcept
{
    stock_ = std::make_shared<int32_t>(pStock);
    dirtyFlag_[4] = true;
}
void MasterProducts::setStockToNull() noexcept
{
    stock_.reset();
    dirtyFlag_[4] = true;
}

const std::string &MasterProducts::getValueOfDimension() const noexcept
{
    const static std::string defaultValue = std::string();
    if(dimension_)
        return *dimension_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterProducts::getDimension() const noexcept
{
    return dimension_;
}
void MasterProducts::setDimension(const std::string &pDimension) noexcept
{
    dimension_ = std::make_shared<std::string>(pDimension);
    dirtyFlag_[5] = true;
}
void MasterProducts::setDimension(std::string &&pDimension) noexcept
{
    dimension_ = std::make_shared<std::string>(std::move(pDimension));
    dirtyFlag_[5] = true;
}
void MasterProducts::setDimensionToNull() noexcept
{
    dimension_.reset();
    dirtyFlag_[5] = true;
}

const int32_t &MasterProducts::getValueOfWeight() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(weight_)
        return *weight_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MasterProducts::getWeight() const noexcept
{
    return weight_;
}
void MasterProducts::setWeight(const int32_t &pWeight) noexcept
{
    weight_ = std::make_shared<int32_t>(pWeight);
    dirtyFlag_[6] = true;
}
void MasterProducts::setWeightToNull() noexcept
{
    weight_.reset();
    dirtyFlag_[6] = true;
}

const std::string &MasterProducts::getValueOfWeightunit() const noexcept
{
    const static std::string defaultValue = std::string();
    if(weightunit_)
        return *weightunit_;
    return defaultValue;
}
const std::shared_ptr<std::string> &MasterProducts::getWeightunit() const noexcept
{
    return weightunit_;
}
void MasterProducts::setWeightunit(const std::string &pWeightunit) noexcept
{
    weightunit_ = std::make_shared<std::string>(pWeightunit);
    dirtyFlag_[7] = true;
}
void MasterProducts::setWeightunit(std::string &&pWeightunit) noexcept
{
    weightunit_ = std::make_shared<std::string>(std::move(pWeightunit));
    dirtyFlag_[7] = true;
}
void MasterProducts::setWeightunitToNull() noexcept
{
    weightunit_.reset();
    dirtyFlag_[7] = true;
}

const int32_t &MasterProducts::getValueOfCategoryid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(categoryid_)
        return *categoryid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MasterProducts::getCategoryid() const noexcept
{
    return categoryid_;
}
void MasterProducts::setCategoryid(const int32_t &pCategoryid) noexcept
{
    categoryid_ = std::make_shared<int32_t>(pCategoryid);
    dirtyFlag_[8] = true;
}
void MasterProducts::setCategoryidToNull() noexcept
{
    categoryid_.reset();
    dirtyFlag_[8] = true;
}

const int32_t &MasterProducts::getValueOfWishlistid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(wishlistid_)
        return *wishlistid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &MasterProducts::getWishlistid() const noexcept
{
    return wishlistid_;
}
void MasterProducts::setWishlistid(const int32_t &pWishlistid) noexcept
{
    wishlistid_ = std::make_shared<int32_t>(pWishlistid);
    dirtyFlag_[9] = true;
}
void MasterProducts::setWishlistidToNull() noexcept
{
    wishlistid_.reset();
    dirtyFlag_[9] = true;
}

const ::trantor::Date &MasterProducts::getValueOfCreatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdat_)
        return *createdat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MasterProducts::getCreatedat() const noexcept
{
    return createdat_;
}
void MasterProducts::setCreatedat(const ::trantor::Date &pCreatedat) noexcept
{
    createdat_ = std::make_shared<::trantor::Date>(pCreatedat);
    dirtyFlag_[10] = true;
}

const ::trantor::Date &MasterProducts::getValueOfUpdatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedat_)
        return *updatedat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &MasterProducts::getUpdatedat() const noexcept
{
    return updatedat_;
}
void MasterProducts::setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept
{
    updatedat_ = std::make_shared<::trantor::Date>(pUpdatedat);
    dirtyFlag_[11] = true;
}

void MasterProducts::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &MasterProducts::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "description",
        "price",
        "stock",
        "dimension",
        "weight",
        "weightUnit",
        "categoryId",
        "wishlistId",
        "createdAt",
        "updatedAt"
    };
    return inCols;
}

void MasterProducts::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStock())
        {
            binder << getValueOfStock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDimension())
        {
            binder << getValueOfDimension();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getWeight())
        {
            binder << getValueOfWeight();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getWeightunit())
        {
            binder << getValueOfWeightunit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCategoryid())
        {
            binder << getValueOfCategoryid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getWishlistid())
        {
            binder << getValueOfWishlistid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> MasterProducts::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void MasterProducts::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStock())
        {
            binder << getValueOfStock();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDimension())
        {
            binder << getValueOfDimension();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getWeight())
        {
            binder << getValueOfWeight();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getWeightunit())
        {
            binder << getValueOfWeightunit();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getCategoryid())
        {
            binder << getValueOfCategoryid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getWishlistid())
        {
            binder << getValueOfWishlistid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MasterProducts::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getStock())
    {
        ret["stock"]=getValueOfStock();
    }
    else
    {
        ret["stock"]=Json::Value();
    }
    if(getDimension())
    {
        ret["dimension"]=getValueOfDimension();
    }
    else
    {
        ret["dimension"]=Json::Value();
    }
    if(getWeight())
    {
        ret["weight"]=getValueOfWeight();
    }
    else
    {
        ret["weight"]=Json::Value();
    }
    if(getWeightunit())
    {
        ret["weightUnit"]=getValueOfWeightunit();
    }
    else
    {
        ret["weightUnit"]=Json::Value();
    }
    if(getCategoryid())
    {
        ret["categoryId"]=getValueOfCategoryid();
    }
    else
    {
        ret["categoryId"]=Json::Value();
    }
    if(getWishlistid())
    {
        ret["wishlistId"]=getValueOfWishlistid();
    }
    else
    {
        ret["wishlistId"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

Json::Value MasterProducts::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[2]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[3]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getStock())
            {
                ret[pMasqueradingVector[4]]=getValueOfStock();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDimension())
            {
                ret[pMasqueradingVector[5]]=getValueOfDimension();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getWeight())
            {
                ret[pMasqueradingVector[6]]=getValueOfWeight();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getWeightunit())
            {
                ret[pMasqueradingVector[7]]=getValueOfWeightunit();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getCategoryid())
            {
                ret[pMasqueradingVector[8]]=getValueOfCategoryid();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getWishlistid())
            {
                ret[pMasqueradingVector[9]]=getValueOfWishlistid();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatedat())
            {
                ret[pMasqueradingVector[10]]=getCreatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getUpdatedat())
            {
                ret[pMasqueradingVector[11]]=getUpdatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getStock())
    {
        ret["stock"]=getValueOfStock();
    }
    else
    {
        ret["stock"]=Json::Value();
    }
    if(getDimension())
    {
        ret["dimension"]=getValueOfDimension();
    }
    else
    {
        ret["dimension"]=Json::Value();
    }
    if(getWeight())
    {
        ret["weight"]=getValueOfWeight();
    }
    else
    {
        ret["weight"]=Json::Value();
    }
    if(getWeightunit())
    {
        ret["weightUnit"]=getValueOfWeightunit();
    }
    else
    {
        ret["weightUnit"]=Json::Value();
    }
    if(getCategoryid())
    {
        ret["categoryId"]=getValueOfCategoryid();
    }
    else
    {
        ret["categoryId"]=Json::Value();
    }
    if(getWishlistid())
    {
        ret["wishlistId"]=getValueOfWishlistid();
    }
    else
    {
        ret["wishlistId"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

bool MasterProducts::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(2, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(3, "price", pJson["price"], err, true))
            return false;
    }
    if(pJson.isMember("stock"))
    {
        if(!validJsonOfField(4, "stock", pJson["stock"], err, true))
            return false;
    }
    if(pJson.isMember("dimension"))
    {
        if(!validJsonOfField(5, "dimension", pJson["dimension"], err, true))
            return false;
    }
    if(pJson.isMember("weight"))
    {
        if(!validJsonOfField(6, "weight", pJson["weight"], err, true))
            return false;
    }
    if(pJson.isMember("weightUnit"))
    {
        if(!validJsonOfField(7, "weightUnit", pJson["weightUnit"], err, true))
            return false;
    }
    if(pJson.isMember("categoryId"))
    {
        if(!validJsonOfField(8, "categoryId", pJson["categoryId"], err, true))
            return false;
    }
    if(pJson.isMember("wishlistId"))
    {
        if(!validJsonOfField(9, "wishlistId", pJson["wishlistId"], err, true))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(10, "createdAt", pJson["createdAt"], err, true))
            return false;
    }
    else
    {
        err="The createdAt column cannot be null";
        return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(11, "updatedAt", pJson["updatedAt"], err, true))
            return false;
    }
    else
    {
        err="The updatedAt column cannot be null";
        return false;
    }
    return true;
}
bool MasterProducts::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                        const std::vector<std::string> &pMasqueradingVector,
                                                        std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[10] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MasterProducts::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(2, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(3, "price", pJson["price"], err, false))
            return false;
    }
    if(pJson.isMember("stock"))
    {
        if(!validJsonOfField(4, "stock", pJson["stock"], err, false))
            return false;
    }
    if(pJson.isMember("dimension"))
    {
        if(!validJsonOfField(5, "dimension", pJson["dimension"], err, false))
            return false;
    }
    if(pJson.isMember("weight"))
    {
        if(!validJsonOfField(6, "weight", pJson["weight"], err, false))
            return false;
    }
    if(pJson.isMember("weightUnit"))
    {
        if(!validJsonOfField(7, "weightUnit", pJson["weightUnit"], err, false))
            return false;
    }
    if(pJson.isMember("categoryId"))
    {
        if(!validJsonOfField(8, "categoryId", pJson["categoryId"], err, false))
            return false;
    }
    if(pJson.isMember("wishlistId"))
    {
        if(!validJsonOfField(9, "wishlistId", pJson["wishlistId"], err, false))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(10, "createdAt", pJson["createdAt"], err, false))
            return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(11, "updatedAt", pJson["updatedAt"], err, false))
            return false;
    }
    return true;
}
bool MasterProducts::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool MasterProducts::validJsonOfField(size_t index,
                                      const std::string &fieldName,
                                      const Json::Value &pJson,
                                      std::string &err,
                                      bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}

Categories MasterProducts::getCategories(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<Categories>> pro(new std::promise<Categories>);
    std::future<Categories> f = pro->get_future();
    getCategories(clientPtr, [&pro] (Categories result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void MasterProducts::getCategories(const DbClientPtr &clientPtr,
                                   const std::function<void(Categories)> &rcb,
                                   const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from categories where id = ?";
    *clientPtr << sql
               << *categoryId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Categories(r[0]));
                    }
               }
               >> ecb;
}
