/**
 *
 *  ProductImages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ProductImages.h"
#include "MasterProducts.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::gaboot;

const std::string ProductImages::Cols::_id = "id";
const std::string ProductImages::Cols::_imagePath = "imagePath";
const std::string ProductImages::Cols::_thumbnailPath = "thumbnailPath";
const std::string ProductImages::Cols::_productId = "productId";
const std::string ProductImages::Cols::_isCover = "isCover";
const std::string ProductImages::Cols::_createdAt = "createdAt";
const std::string ProductImages::Cols::_updatedAt = "updatedAt";
const std::string ProductImages::primaryKeyName = "id";
const bool ProductImages::hasPrimaryKey = true;
const std::string ProductImages::tableName = "product_images";

const std::vector<typename ProductImages::MetaData> ProductImages::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"imagePath","std::string","varchar(255)",255,0,0,1},
{"thumbnailPath","std::string","varchar(255)",255,0,0,1},
{"productId","int32_t","int(11)",4,0,0,1},
{"isCover","int8_t","tinyint(1)",1,0,0,1},
{"createdAt","::trantor::Date","timestamp",0,0,0,0},
{"updatedAt","::trantor::Date","timestamp",0,0,0,0}
};
const std::string &ProductImages::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ProductImages::ProductImages(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["imagePath"].isNull())
        {
            imagepath_=std::make_shared<std::string>(r["imagePath"].as<std::string>());
        }
        if(!r["thumbnailPath"].isNull())
        {
            thumbnailpath_=std::make_shared<std::string>(r["thumbnailPath"].as<std::string>());
        }
        if(!r["productId"].isNull())
        {
            productid_=std::make_shared<int32_t>(r["productId"].as<int32_t>());
        }
        if(!r["isCover"].isNull())
        {
            iscover_=std::make_shared<int8_t>(r["isCover"].as<int8_t>());
        }
        if(!r["createdAt"].isNull())
        {
            auto timeStr = r["createdAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updatedAt"].isNull())
        {
            auto timeStr = r["updatedAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            imagepath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            thumbnailpath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            productid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            iscover_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

ProductImages::ProductImages(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            imagepath_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            thumbnailpath_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            productid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            iscover_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

ProductImages::ProductImages(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("imagePath"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["imagePath"].isNull())
        {
            imagepath_=std::make_shared<std::string>(pJson["imagePath"].asString());
        }
    }
    if(pJson.isMember("thumbnailPath"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["thumbnailPath"].isNull())
        {
            thumbnailpath_=std::make_shared<std::string>(pJson["thumbnailPath"].asString());
        }
    }
    if(pJson.isMember("productId"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["productId"].isNull())
        {
            productid_=std::make_shared<int32_t>((int32_t)pJson["productId"].asInt64());
        }
    }
    if(pJson.isMember("isCover"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["isCover"].isNull())
        {
            iscover_=std::make_shared<int8_t>((int8_t)pJson["isCover"].asInt64());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void ProductImages::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            imagepath_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            thumbnailpath_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            productid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            iscover_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[5]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void ProductImages::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("imagePath"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["imagePath"].isNull())
        {
            imagepath_=std::make_shared<std::string>(pJson["imagePath"].asString());
        }
    }
    if(pJson.isMember("thumbnailPath"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["thumbnailPath"].isNull())
        {
            thumbnailpath_=std::make_shared<std::string>(pJson["thumbnailPath"].asString());
        }
    }
    if(pJson.isMember("productId"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["productId"].isNull())
        {
            productid_=std::make_shared<int32_t>((int32_t)pJson["productId"].asInt64());
        }
    }
    if(pJson.isMember("isCover"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["isCover"].isNull())
        {
            iscover_=std::make_shared<int8_t>((int8_t)pJson["isCover"].asInt64());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint64_t &ProductImages::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &ProductImages::getId() const noexcept
{
    return id_;
}
void ProductImages::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename ProductImages::PrimaryKeyType & ProductImages::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &ProductImages::getValueOfImagepath() const noexcept
{
    const static std::string defaultValue = std::string();
    if(imagepath_)
        return *imagepath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProductImages::getImagepath() const noexcept
{
    return imagepath_;
}
void ProductImages::setImagepath(const std::string &pImagepath) noexcept
{
    imagepath_ = std::make_shared<std::string>(pImagepath);
    dirtyFlag_[1] = true;
}
void ProductImages::setImagepath(std::string &&pImagepath) noexcept
{
    imagepath_ = std::make_shared<std::string>(std::move(pImagepath));
    dirtyFlag_[1] = true;
}

const std::string &ProductImages::getValueOfThumbnailpath() const noexcept
{
    const static std::string defaultValue = std::string();
    if(thumbnailpath_)
        return *thumbnailpath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProductImages::getThumbnailpath() const noexcept
{
    return thumbnailpath_;
}
void ProductImages::setThumbnailpath(const std::string &pThumbnailpath) noexcept
{
    thumbnailpath_ = std::make_shared<std::string>(pThumbnailpath);
    dirtyFlag_[2] = true;
}
void ProductImages::setThumbnailpath(std::string &&pThumbnailpath) noexcept
{
    thumbnailpath_ = std::make_shared<std::string>(std::move(pThumbnailpath));
    dirtyFlag_[2] = true;
}

const int32_t &ProductImages::getValueOfProductid() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(productid_)
        return *productid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &ProductImages::getProductid() const noexcept
{
    return productid_;
}
void ProductImages::setProductid(const int32_t &pProductid) noexcept
{
    productid_ = std::make_shared<int32_t>(pProductid);
    dirtyFlag_[3] = true;
}

const int8_t &ProductImages::getValueOfIscover() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(iscover_)
        return *iscover_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &ProductImages::getIscover() const noexcept
{
    return iscover_;
}
void ProductImages::setIscover(const int8_t &pIscover) noexcept
{
    iscover_ = std::make_shared<int8_t>(pIscover);
    dirtyFlag_[4] = true;
}

const ::trantor::Date &ProductImages::getValueOfCreatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdat_)
        return *createdat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ProductImages::getCreatedat() const noexcept
{
    return createdat_;
}
void ProductImages::setCreatedat(const ::trantor::Date &pCreatedat) noexcept
{
    createdat_ = std::make_shared<::trantor::Date>(pCreatedat);
    dirtyFlag_[5] = true;
}
void ProductImages::setCreatedatToNull() noexcept
{
    createdat_.reset();
    dirtyFlag_[5] = true;
}

const ::trantor::Date &ProductImages::getValueOfUpdatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedat_)
        return *updatedat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ProductImages::getUpdatedat() const noexcept
{
    return updatedat_;
}
void ProductImages::setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept
{
    updatedat_ = std::make_shared<::trantor::Date>(pUpdatedat);
    dirtyFlag_[6] = true;
}
void ProductImages::setUpdatedatToNull() noexcept
{
    updatedat_.reset();
    dirtyFlag_[6] = true;
}

void ProductImages::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &ProductImages::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "imagePath",
        "thumbnailPath",
        "productId",
        "isCover",
        "createdAt",
        "updatedAt"
    };
    return inCols;
}

void ProductImages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getImagepath())
        {
            binder << getValueOfImagepath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getThumbnailpath())
        {
            binder << getValueOfThumbnailpath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getProductid())
        {
            binder << getValueOfProductid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIscover())
        {
            binder << getValueOfIscover();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ProductImages::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void ProductImages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getImagepath())
        {
            binder << getValueOfImagepath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getThumbnailpath())
        {
            binder << getValueOfThumbnailpath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getProductid())
        {
            binder << getValueOfProductid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getIscover())
        {
            binder << getValueOfIscover();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ProductImages::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getImagepath())
    {
        ret["imagePath"]=getValueOfImagepath();
    }
    else
    {
        ret["imagePath"]=Json::Value();
    }
    if(getThumbnailpath())
    {
        ret["thumbnailPath"]=getValueOfThumbnailpath();
    }
    else
    {
        ret["thumbnailPath"]=Json::Value();
    }
    if(getProductid())
    {
        ret["productId"]=getValueOfProductid();
    }
    else
    {
        ret["productId"]=Json::Value();
    }
    if(getIscover())
    {
        ret["isCover"]=getValueOfIscover();
    }
    else
    {
        ret["isCover"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

Json::Value ProductImages::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getImagepath())
            {
                ret[pMasqueradingVector[1]]=getValueOfImagepath();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getThumbnailpath())
            {
                ret[pMasqueradingVector[2]]=getValueOfThumbnailpath();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getProductid())
            {
                ret[pMasqueradingVector[3]]=getValueOfProductid();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getIscover())
            {
                ret[pMasqueradingVector[4]]=getValueOfIscover();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getCreatedat())
            {
                ret[pMasqueradingVector[5]]=getCreatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getUpdatedat())
            {
                ret[pMasqueradingVector[6]]=getUpdatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getImagepath())
    {
        ret["imagePath"]=getValueOfImagepath();
    }
    else
    {
        ret["imagePath"]=Json::Value();
    }
    if(getThumbnailpath())
    {
        ret["thumbnailPath"]=getValueOfThumbnailpath();
    }
    else
    {
        ret["thumbnailPath"]=Json::Value();
    }
    if(getProductid())
    {
        ret["productId"]=getValueOfProductid();
    }
    else
    {
        ret["productId"]=Json::Value();
    }
    if(getIscover())
    {
        ret["isCover"]=getValueOfIscover();
    }
    else
    {
        ret["isCover"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

bool ProductImages::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("imagePath"))
    {
        if(!validJsonOfField(1, "imagePath", pJson["imagePath"], err, true))
            return false;
    }
    else
    {
        err="The imagePath column cannot be null";
        return false;
    }
    if(pJson.isMember("thumbnailPath"))
    {
        if(!validJsonOfField(2, "thumbnailPath", pJson["thumbnailPath"], err, true))
            return false;
    }
    else
    {
        err="The thumbnailPath column cannot be null";
        return false;
    }
    if(pJson.isMember("productId"))
    {
        if(!validJsonOfField(3, "productId", pJson["productId"], err, true))
            return false;
    }
    else
    {
        err="The productId column cannot be null";
        return false;
    }
    if(pJson.isMember("isCover"))
    {
        if(!validJsonOfField(4, "isCover", pJson["isCover"], err, true))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(5, "createdAt", pJson["createdAt"], err, true))
            return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(6, "updatedAt", pJson["updatedAt"], err, true))
            return false;
    }
    return true;
}
bool ProductImages::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                       const std::vector<std::string> &pMasqueradingVector,
                                                       std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProductImages::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("imagePath"))
    {
        if(!validJsonOfField(1, "imagePath", pJson["imagePath"], err, false))
            return false;
    }
    if(pJson.isMember("thumbnailPath"))
    {
        if(!validJsonOfField(2, "thumbnailPath", pJson["thumbnailPath"], err, false))
            return false;
    }
    if(pJson.isMember("productId"))
    {
        if(!validJsonOfField(3, "productId", pJson["productId"], err, false))
            return false;
    }
    if(pJson.isMember("isCover"))
    {
        if(!validJsonOfField(4, "isCover", pJson["isCover"], err, false))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(5, "createdAt", pJson["createdAt"], err, false))
            return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(6, "updatedAt", pJson["updatedAt"], err, false))
            return false;
    }
    return true;
}
bool ProductImages::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProductImages::validJsonOfField(size_t index,
                                     const std::string &fieldName,
                                     const Json::Value &pJson,
                                     std::string &err,
                                     bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<MasterProducts> ProductImages::getMaster_products(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<std::vector<MasterProducts>>> pro(new std::promise<std::vector<MasterProducts>>);
    std::future<std::vector<MasterProducts>> f = pro->get_future();
    getMaster_products(clientPtr, [&pro] (std::vector<MasterProducts> result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void ProductImages::getMaster_products(const DbClientPtr &clientPtr,
                                       const std::function<void(std::vector<MasterProducts>)> &rcb,
                                       const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from master_products where id = ?";
    *clientPtr << sql
               << *productid_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<MasterProducts> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(MasterProducts(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
