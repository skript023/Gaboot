/**
 *
 *  Payments.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Payments.h"
#include "Orders.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::gaboot;

const std::string Payments::Cols::_id = "id";
const std::string Payments::Cols::_order_id = "order_id";
const std::string Payments::Cols::_gross_amount = "gross_amount";
const std::string Payments::Cols::_name = "name";
const std::string Payments::Cols::_transaction_id = "transaction_id";
const std::string Payments::Cols::_merchant_id = "merchant_id";
const std::string Payments::Cols::_payment_type = "payment_type";
const std::string Payments::Cols::_description = "description";
const std::string Payments::Cols::_transaction_time = "transaction_time";
const std::string Payments::Cols::_transaction_status = "transaction_status";
const std::string Payments::Cols::_fraud_status = "fraud_status";
const std::string Payments::Cols::_bank = "bank";
const std::string Payments::Cols::_va_number = "va_number";
const std::string Payments::Cols::_currency = "currency";
const std::string Payments::Cols::_expiry_time = "expiry_time";
const std::string Payments::Cols::_created_at = "created_at";
const std::string Payments::Cols::_updated_at = "updated_at";
const std::string Payments::primaryKeyName = "id";
const bool Payments::hasPrimaryKey = true;
const std::string Payments::tableName = "payments";

const std::vector<typename Payments::MetaData> Payments::metaData_={
{"id","std::string","uuid",0,0,1,1},
{"order_id","std::string","uuid",0,0,0,1},
{"gross_amount","double","double precision",8,0,0,0},
{"name","std::string","character varying",255,0,0,0},
{"transaction_id","std::string","character varying",255,0,0,0},
{"merchant_id","std::string","character varying",255,0,0,0},
{"payment_type","std::string","character varying",255,0,0,0},
{"description","std::string","character varying",255,0,0,0},
{"transaction_time","std::string","character varying",255,0,0,0},
{"transaction_status","std::string","character varying",255,0,0,0},
{"fraud_status","std::string","character varying",255,0,0,0},
{"bank","std::string","character varying",255,0,0,0},
{"va_number","std::string","character varying",255,0,0,0},
{"currency","std::string","character varying",255,0,0,0},
{"expiry_time","std::string","character varying",255,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1},
{"updated_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &Payments::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Payments::Payments(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["order_id"].isNull())
        {
            orderId_=std::make_shared<std::string>(r["order_id"].as<std::string>());
        }
        if(!r["gross_amount"].isNull())
        {
            grossAmount_=std::make_shared<double>(r["gross_amount"].as<double>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["transaction_id"].isNull())
        {
            transactionId_=std::make_shared<std::string>(r["transaction_id"].as<std::string>());
        }
        if(!r["merchant_id"].isNull())
        {
            merchantId_=std::make_shared<std::string>(r["merchant_id"].as<std::string>());
        }
        if(!r["payment_type"].isNull())
        {
            paymentType_=std::make_shared<std::string>(r["payment_type"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["transaction_time"].isNull())
        {
            transactionTime_=std::make_shared<std::string>(r["transaction_time"].as<std::string>());
        }
        if(!r["transaction_status"].isNull())
        {
            transactionStatus_=std::make_shared<std::string>(r["transaction_status"].as<std::string>());
        }
        if(!r["fraud_status"].isNull())
        {
            fraudStatus_=std::make_shared<std::string>(r["fraud_status"].as<std::string>());
        }
        if(!r["bank"].isNull())
        {
            bank_=std::make_shared<std::string>(r["bank"].as<std::string>());
        }
        if(!r["va_number"].isNull())
        {
            vaNumber_=std::make_shared<std::string>(r["va_number"].as<std::string>());
        }
        if(!r["currency"].isNull())
        {
            currency_=std::make_shared<std::string>(r["currency"].as<std::string>());
        }
        if(!r["expiry_time"].isNull())
        {
            expiryTime_=std::make_shared<std::string>(r["expiry_time"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 17 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            orderId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            grossAmount_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            transactionId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            merchantId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            paymentType_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            transactionTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            transactionStatus_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            fraudStatus_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            bank_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            vaNumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            currency_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            expiryTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Payments::Payments(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            orderId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            grossAmount_=std::make_shared<double>(pJson[pMasqueradingVector[2]].asDouble());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            transactionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            merchantId_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            paymentType_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            transactionTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            transactionStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            fraudStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            bank_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            vaNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            currency_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            expiryTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Payments::Payments(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("order_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["order_id"].isNull())
        {
            orderId_=std::make_shared<std::string>(pJson["order_id"].asString());
        }
    }
    if(pJson.isMember("gross_amount"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["gross_amount"].isNull())
        {
            grossAmount_=std::make_shared<double>(pJson["gross_amount"].asDouble());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("transaction_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["transaction_id"].isNull())
        {
            transactionId_=std::make_shared<std::string>(pJson["transaction_id"].asString());
        }
    }
    if(pJson.isMember("merchant_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["merchant_id"].isNull())
        {
            merchantId_=std::make_shared<std::string>(pJson["merchant_id"].asString());
        }
    }
    if(pJson.isMember("payment_type"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["payment_type"].isNull())
        {
            paymentType_=std::make_shared<std::string>(pJson["payment_type"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("transaction_time"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["transaction_time"].isNull())
        {
            transactionTime_=std::make_shared<std::string>(pJson["transaction_time"].asString());
        }
    }
    if(pJson.isMember("transaction_status"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["transaction_status"].isNull())
        {
            transactionStatus_=std::make_shared<std::string>(pJson["transaction_status"].asString());
        }
    }
    if(pJson.isMember("fraud_status"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["fraud_status"].isNull())
        {
            fraudStatus_=std::make_shared<std::string>(pJson["fraud_status"].asString());
        }
    }
    if(pJson.isMember("bank"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["bank"].isNull())
        {
            bank_=std::make_shared<std::string>(pJson["bank"].asString());
        }
    }
    if(pJson.isMember("va_number"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["va_number"].isNull())
        {
            vaNumber_=std::make_shared<std::string>(pJson["va_number"].asString());
        }
    }
    if(pJson.isMember("currency"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["currency"].isNull())
        {
            currency_=std::make_shared<std::string>(pJson["currency"].asString());
        }
    }
    if(pJson.isMember("expiry_time"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["expiry_time"].isNull())
        {
            expiryTime_=std::make_shared<std::string>(pJson["expiry_time"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Payments::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 17)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            orderId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            grossAmount_=std::make_shared<double>(pJson[pMasqueradingVector[2]].asDouble());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            transactionId_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            merchantId_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            paymentType_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            transactionTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            transactionStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            fraudStatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            bank_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            vaNumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            currency_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            expiryTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Payments::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("order_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["order_id"].isNull())
        {
            orderId_=std::make_shared<std::string>(pJson["order_id"].asString());
        }
    }
    if(pJson.isMember("gross_amount"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["gross_amount"].isNull())
        {
            grossAmount_=std::make_shared<double>(pJson["gross_amount"].asDouble());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("transaction_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["transaction_id"].isNull())
        {
            transactionId_=std::make_shared<std::string>(pJson["transaction_id"].asString());
        }
    }
    if(pJson.isMember("merchant_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["merchant_id"].isNull())
        {
            merchantId_=std::make_shared<std::string>(pJson["merchant_id"].asString());
        }
    }
    if(pJson.isMember("payment_type"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["payment_type"].isNull())
        {
            paymentType_=std::make_shared<std::string>(pJson["payment_type"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("transaction_time"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["transaction_time"].isNull())
        {
            transactionTime_=std::make_shared<std::string>(pJson["transaction_time"].asString());
        }
    }
    if(pJson.isMember("transaction_status"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["transaction_status"].isNull())
        {
            transactionStatus_=std::make_shared<std::string>(pJson["transaction_status"].asString());
        }
    }
    if(pJson.isMember("fraud_status"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["fraud_status"].isNull())
        {
            fraudStatus_=std::make_shared<std::string>(pJson["fraud_status"].asString());
        }
    }
    if(pJson.isMember("bank"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["bank"].isNull())
        {
            bank_=std::make_shared<std::string>(pJson["bank"].asString());
        }
    }
    if(pJson.isMember("va_number"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["va_number"].isNull())
        {
            vaNumber_=std::make_shared<std::string>(pJson["va_number"].asString());
        }
    }
    if(pJson.isMember("currency"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["currency"].isNull())
        {
            currency_=std::make_shared<std::string>(pJson["currency"].asString());
        }
    }
    if(pJson.isMember("expiry_time"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["expiry_time"].isNull())
        {
            expiryTime_=std::make_shared<std::string>(pJson["expiry_time"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const std::string &Payments::getValueOfId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getId() const noexcept
{
    return id_;
}
void Payments::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Payments::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename Payments::PrimaryKeyType & Payments::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Payments::getValueOfOrderId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(orderId_)
        return *orderId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getOrderId() const noexcept
{
    return orderId_;
}
void Payments::setOrderId(const std::string &pOrderId) noexcept
{
    orderId_ = std::make_shared<std::string>(pOrderId);
    dirtyFlag_[1] = true;
}
void Payments::setOrderId(std::string &&pOrderId) noexcept
{
    orderId_ = std::make_shared<std::string>(std::move(pOrderId));
    dirtyFlag_[1] = true;
}

const double &Payments::getValueOfGrossAmount() const noexcept
{
    static const double defaultValue = double();
    if(grossAmount_)
        return *grossAmount_;
    return defaultValue;
}
const std::shared_ptr<double> &Payments::getGrossAmount() const noexcept
{
    return grossAmount_;
}
void Payments::setGrossAmount(const double &pGrossAmount) noexcept
{
    grossAmount_ = std::make_shared<double>(pGrossAmount);
    dirtyFlag_[2] = true;
}
void Payments::setGrossAmountToNull() noexcept
{
    grossAmount_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Payments::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getName() const noexcept
{
    return name_;
}
void Payments::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[3] = true;
}
void Payments::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[3] = true;
}
void Payments::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Payments::getValueOfTransactionId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(transactionId_)
        return *transactionId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getTransactionId() const noexcept
{
    return transactionId_;
}
void Payments::setTransactionId(const std::string &pTransactionId) noexcept
{
    transactionId_ = std::make_shared<std::string>(pTransactionId);
    dirtyFlag_[4] = true;
}
void Payments::setTransactionId(std::string &&pTransactionId) noexcept
{
    transactionId_ = std::make_shared<std::string>(std::move(pTransactionId));
    dirtyFlag_[4] = true;
}
void Payments::setTransactionIdToNull() noexcept
{
    transactionId_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Payments::getValueOfMerchantId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(merchantId_)
        return *merchantId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getMerchantId() const noexcept
{
    return merchantId_;
}
void Payments::setMerchantId(const std::string &pMerchantId) noexcept
{
    merchantId_ = std::make_shared<std::string>(pMerchantId);
    dirtyFlag_[5] = true;
}
void Payments::setMerchantId(std::string &&pMerchantId) noexcept
{
    merchantId_ = std::make_shared<std::string>(std::move(pMerchantId));
    dirtyFlag_[5] = true;
}
void Payments::setMerchantIdToNull() noexcept
{
    merchantId_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Payments::getValueOfPaymentType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(paymentType_)
        return *paymentType_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getPaymentType() const noexcept
{
    return paymentType_;
}
void Payments::setPaymentType(const std::string &pPaymentType) noexcept
{
    paymentType_ = std::make_shared<std::string>(pPaymentType);
    dirtyFlag_[6] = true;
}
void Payments::setPaymentType(std::string &&pPaymentType) noexcept
{
    paymentType_ = std::make_shared<std::string>(std::move(pPaymentType));
    dirtyFlag_[6] = true;
}
void Payments::setPaymentTypeToNull() noexcept
{
    paymentType_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Payments::getValueOfDescription() const noexcept
{
    static const std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getDescription() const noexcept
{
    return description_;
}
void Payments::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[7] = true;
}
void Payments::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[7] = true;
}
void Payments::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Payments::getValueOfTransactionTime() const noexcept
{
    static const std::string defaultValue = std::string();
    if(transactionTime_)
        return *transactionTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getTransactionTime() const noexcept
{
    return transactionTime_;
}
void Payments::setTransactionTime(const std::string &pTransactionTime) noexcept
{
    transactionTime_ = std::make_shared<std::string>(pTransactionTime);
    dirtyFlag_[8] = true;
}
void Payments::setTransactionTime(std::string &&pTransactionTime) noexcept
{
    transactionTime_ = std::make_shared<std::string>(std::move(pTransactionTime));
    dirtyFlag_[8] = true;
}
void Payments::setTransactionTimeToNull() noexcept
{
    transactionTime_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Payments::getValueOfTransactionStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(transactionStatus_)
        return *transactionStatus_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getTransactionStatus() const noexcept
{
    return transactionStatus_;
}
void Payments::setTransactionStatus(const std::string &pTransactionStatus) noexcept
{
    transactionStatus_ = std::make_shared<std::string>(pTransactionStatus);
    dirtyFlag_[9] = true;
}
void Payments::setTransactionStatus(std::string &&pTransactionStatus) noexcept
{
    transactionStatus_ = std::make_shared<std::string>(std::move(pTransactionStatus));
    dirtyFlag_[9] = true;
}
void Payments::setTransactionStatusToNull() noexcept
{
    transactionStatus_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Payments::getValueOfFraudStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(fraudStatus_)
        return *fraudStatus_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getFraudStatus() const noexcept
{
    return fraudStatus_;
}
void Payments::setFraudStatus(const std::string &pFraudStatus) noexcept
{
    fraudStatus_ = std::make_shared<std::string>(pFraudStatus);
    dirtyFlag_[10] = true;
}
void Payments::setFraudStatus(std::string &&pFraudStatus) noexcept
{
    fraudStatus_ = std::make_shared<std::string>(std::move(pFraudStatus));
    dirtyFlag_[10] = true;
}
void Payments::setFraudStatusToNull() noexcept
{
    fraudStatus_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Payments::getValueOfBank() const noexcept
{
    static const std::string defaultValue = std::string();
    if(bank_)
        return *bank_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getBank() const noexcept
{
    return bank_;
}
void Payments::setBank(const std::string &pBank) noexcept
{
    bank_ = std::make_shared<std::string>(pBank);
    dirtyFlag_[11] = true;
}
void Payments::setBank(std::string &&pBank) noexcept
{
    bank_ = std::make_shared<std::string>(std::move(pBank));
    dirtyFlag_[11] = true;
}
void Payments::setBankToNull() noexcept
{
    bank_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Payments::getValueOfVaNumber() const noexcept
{
    static const std::string defaultValue = std::string();
    if(vaNumber_)
        return *vaNumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getVaNumber() const noexcept
{
    return vaNumber_;
}
void Payments::setVaNumber(const std::string &pVaNumber) noexcept
{
    vaNumber_ = std::make_shared<std::string>(pVaNumber);
    dirtyFlag_[12] = true;
}
void Payments::setVaNumber(std::string &&pVaNumber) noexcept
{
    vaNumber_ = std::make_shared<std::string>(std::move(pVaNumber));
    dirtyFlag_[12] = true;
}
void Payments::setVaNumberToNull() noexcept
{
    vaNumber_.reset();
    dirtyFlag_[12] = true;
}

const std::string &Payments::getValueOfCurrency() const noexcept
{
    static const std::string defaultValue = std::string();
    if(currency_)
        return *currency_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getCurrency() const noexcept
{
    return currency_;
}
void Payments::setCurrency(const std::string &pCurrency) noexcept
{
    currency_ = std::make_shared<std::string>(pCurrency);
    dirtyFlag_[13] = true;
}
void Payments::setCurrency(std::string &&pCurrency) noexcept
{
    currency_ = std::make_shared<std::string>(std::move(pCurrency));
    dirtyFlag_[13] = true;
}
void Payments::setCurrencyToNull() noexcept
{
    currency_.reset();
    dirtyFlag_[13] = true;
}

const std::string &Payments::getValueOfExpiryTime() const noexcept
{
    static const std::string defaultValue = std::string();
    if(expiryTime_)
        return *expiryTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getExpiryTime() const noexcept
{
    return expiryTime_;
}
void Payments::setExpiryTime(const std::string &pExpiryTime) noexcept
{
    expiryTime_ = std::make_shared<std::string>(pExpiryTime);
    dirtyFlag_[14] = true;
}
void Payments::setExpiryTime(std::string &&pExpiryTime) noexcept
{
    expiryTime_ = std::make_shared<std::string>(std::move(pExpiryTime));
    dirtyFlag_[14] = true;
}
void Payments::setExpiryTimeToNull() noexcept
{
    expiryTime_.reset();
    dirtyFlag_[14] = true;
}

const ::trantor::Date &Payments::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Payments::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Payments::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[15] = true;
}

const ::trantor::Date &Payments::getValueOfUpdatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Payments::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void Payments::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[16] = true;
}

void Payments::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Payments::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "order_id",
        "gross_amount",
        "name",
        "transaction_id",
        "merchant_id",
        "payment_type",
        "description",
        "transaction_time",
        "transaction_status",
        "fraud_status",
        "bank",
        "va_number",
        "currency",
        "expiry_time",
        "created_at",
        "updated_at"
    };
    return inCols;
}

void Payments::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getOrderId())
        {
            binder << getValueOfOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getGrossAmount())
        {
            binder << getValueOfGrossAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTransactionId())
        {
            binder << getValueOfTransactionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMerchantId())
        {
            binder << getValueOfMerchantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPaymentType())
        {
            binder << getValueOfPaymentType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTransactionTime())
        {
            binder << getValueOfTransactionTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getTransactionStatus())
        {
            binder << getValueOfTransactionStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getFraudStatus())
        {
            binder << getValueOfFraudStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBank())
        {
            binder << getValueOfBank();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getVaNumber())
        {
            binder << getValueOfVaNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCurrency())
        {
            binder << getValueOfCurrency();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getExpiryTime())
        {
            binder << getValueOfExpiryTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Payments::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    return ret;
}

void Payments::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getOrderId())
        {
            binder << getValueOfOrderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getGrossAmount())
        {
            binder << getValueOfGrossAmount();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTransactionId())
        {
            binder << getValueOfTransactionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMerchantId())
        {
            binder << getValueOfMerchantId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getPaymentType())
        {
            binder << getValueOfPaymentType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getTransactionTime())
        {
            binder << getValueOfTransactionTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getTransactionStatus())
        {
            binder << getValueOfTransactionStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getFraudStatus())
        {
            binder << getValueOfFraudStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBank())
        {
            binder << getValueOfBank();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getVaNumber())
        {
            binder << getValueOfVaNumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCurrency())
        {
            binder << getValueOfCurrency();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getExpiryTime())
        {
            binder << getValueOfExpiryTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Payments::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getOrderId())
    {
        ret["order_id"]=getValueOfOrderId();
    }
    else
    {
        ret["order_id"]=Json::Value();
    }
    if(getGrossAmount())
    {
        ret["gross_amount"]=getValueOfGrossAmount();
    }
    else
    {
        ret["gross_amount"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTransactionId())
    {
        ret["transaction_id"]=getValueOfTransactionId();
    }
    else
    {
        ret["transaction_id"]=Json::Value();
    }
    if(getMerchantId())
    {
        ret["merchant_id"]=getValueOfMerchantId();
    }
    else
    {
        ret["merchant_id"]=Json::Value();
    }
    if(getPaymentType())
    {
        ret["payment_type"]=getValueOfPaymentType();
    }
    else
    {
        ret["payment_type"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getTransactionTime())
    {
        ret["transaction_time"]=getValueOfTransactionTime();
    }
    else
    {
        ret["transaction_time"]=Json::Value();
    }
    if(getTransactionStatus())
    {
        ret["transaction_status"]=getValueOfTransactionStatus();
    }
    else
    {
        ret["transaction_status"]=Json::Value();
    }
    if(getFraudStatus())
    {
        ret["fraud_status"]=getValueOfFraudStatus();
    }
    else
    {
        ret["fraud_status"]=Json::Value();
    }
    if(getBank())
    {
        ret["bank"]=getValueOfBank();
    }
    else
    {
        ret["bank"]=Json::Value();
    }
    if(getVaNumber())
    {
        ret["va_number"]=getValueOfVaNumber();
    }
    else
    {
        ret["va_number"]=Json::Value();
    }
    if(getCurrency())
    {
        ret["currency"]=getValueOfCurrency();
    }
    else
    {
        ret["currency"]=Json::Value();
    }
    if(getExpiryTime())
    {
        ret["expiry_time"]=getValueOfExpiryTime();
    }
    else
    {
        ret["expiry_time"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

Json::Value Payments::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 17)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getOrderId())
            {
                ret[pMasqueradingVector[1]]=getValueOfOrderId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getGrossAmount())
            {
                ret[pMasqueradingVector[2]]=getValueOfGrossAmount();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[3]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTransactionId())
            {
                ret[pMasqueradingVector[4]]=getValueOfTransactionId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getMerchantId())
            {
                ret[pMasqueradingVector[5]]=getValueOfMerchantId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getPaymentType())
            {
                ret[pMasqueradingVector[6]]=getValueOfPaymentType();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[7]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getTransactionTime())
            {
                ret[pMasqueradingVector[8]]=getValueOfTransactionTime();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getTransactionStatus())
            {
                ret[pMasqueradingVector[9]]=getValueOfTransactionStatus();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getFraudStatus())
            {
                ret[pMasqueradingVector[10]]=getValueOfFraudStatus();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getBank())
            {
                ret[pMasqueradingVector[11]]=getValueOfBank();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getVaNumber())
            {
                ret[pMasqueradingVector[12]]=getValueOfVaNumber();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCurrency())
            {
                ret[pMasqueradingVector[13]]=getValueOfCurrency();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getExpiryTime())
            {
                ret[pMasqueradingVector[14]]=getValueOfExpiryTime();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[15]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[16]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getOrderId())
    {
        ret["order_id"]=getValueOfOrderId();
    }
    else
    {
        ret["order_id"]=Json::Value();
    }
    if(getGrossAmount())
    {
        ret["gross_amount"]=getValueOfGrossAmount();
    }
    else
    {
        ret["gross_amount"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTransactionId())
    {
        ret["transaction_id"]=getValueOfTransactionId();
    }
    else
    {
        ret["transaction_id"]=Json::Value();
    }
    if(getMerchantId())
    {
        ret["merchant_id"]=getValueOfMerchantId();
    }
    else
    {
        ret["merchant_id"]=Json::Value();
    }
    if(getPaymentType())
    {
        ret["payment_type"]=getValueOfPaymentType();
    }
    else
    {
        ret["payment_type"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getTransactionTime())
    {
        ret["transaction_time"]=getValueOfTransactionTime();
    }
    else
    {
        ret["transaction_time"]=Json::Value();
    }
    if(getTransactionStatus())
    {
        ret["transaction_status"]=getValueOfTransactionStatus();
    }
    else
    {
        ret["transaction_status"]=Json::Value();
    }
    if(getFraudStatus())
    {
        ret["fraud_status"]=getValueOfFraudStatus();
    }
    else
    {
        ret["fraud_status"]=Json::Value();
    }
    if(getBank())
    {
        ret["bank"]=getValueOfBank();
    }
    else
    {
        ret["bank"]=Json::Value();
    }
    if(getVaNumber())
    {
        ret["va_number"]=getValueOfVaNumber();
    }
    else
    {
        ret["va_number"]=Json::Value();
    }
    if(getCurrency())
    {
        ret["currency"]=getValueOfCurrency();
    }
    else
    {
        ret["currency"]=Json::Value();
    }
    if(getExpiryTime())
    {
        ret["expiry_time"]=getValueOfExpiryTime();
    }
    else
    {
        ret["expiry_time"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

bool Payments::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("order_id"))
    {
        if(!validJsonOfField(1, "order_id", pJson["order_id"], err, true))
            return false;
    }
    else
    {
        err="The order_id column cannot be null";
        return false;
    }
    if(pJson.isMember("gross_amount"))
    {
        if(!validJsonOfField(2, "gross_amount", pJson["gross_amount"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(3, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("transaction_id"))
    {
        if(!validJsonOfField(4, "transaction_id", pJson["transaction_id"], err, true))
            return false;
    }
    if(pJson.isMember("merchant_id"))
    {
        if(!validJsonOfField(5, "merchant_id", pJson["merchant_id"], err, true))
            return false;
    }
    if(pJson.isMember("payment_type"))
    {
        if(!validJsonOfField(6, "payment_type", pJson["payment_type"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(7, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("transaction_time"))
    {
        if(!validJsonOfField(8, "transaction_time", pJson["transaction_time"], err, true))
            return false;
    }
    if(pJson.isMember("transaction_status"))
    {
        if(!validJsonOfField(9, "transaction_status", pJson["transaction_status"], err, true))
            return false;
    }
    if(pJson.isMember("fraud_status"))
    {
        if(!validJsonOfField(10, "fraud_status", pJson["fraud_status"], err, true))
            return false;
    }
    if(pJson.isMember("bank"))
    {
        if(!validJsonOfField(11, "bank", pJson["bank"], err, true))
            return false;
    }
    if(pJson.isMember("va_number"))
    {
        if(!validJsonOfField(12, "va_number", pJson["va_number"], err, true))
            return false;
    }
    if(pJson.isMember("currency"))
    {
        if(!validJsonOfField(13, "currency", pJson["currency"], err, true))
            return false;
    }
    if(pJson.isMember("expiry_time"))
    {
        if(!validJsonOfField(14, "expiry_time", pJson["expiry_time"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(15, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(16, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    return true;
}
bool Payments::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Payments::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("order_id"))
    {
        if(!validJsonOfField(1, "order_id", pJson["order_id"], err, false))
            return false;
    }
    if(pJson.isMember("gross_amount"))
    {
        if(!validJsonOfField(2, "gross_amount", pJson["gross_amount"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(3, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("transaction_id"))
    {
        if(!validJsonOfField(4, "transaction_id", pJson["transaction_id"], err, false))
            return false;
    }
    if(pJson.isMember("merchant_id"))
    {
        if(!validJsonOfField(5, "merchant_id", pJson["merchant_id"], err, false))
            return false;
    }
    if(pJson.isMember("payment_type"))
    {
        if(!validJsonOfField(6, "payment_type", pJson["payment_type"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(7, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("transaction_time"))
    {
        if(!validJsonOfField(8, "transaction_time", pJson["transaction_time"], err, false))
            return false;
    }
    if(pJson.isMember("transaction_status"))
    {
        if(!validJsonOfField(9, "transaction_status", pJson["transaction_status"], err, false))
            return false;
    }
    if(pJson.isMember("fraud_status"))
    {
        if(!validJsonOfField(10, "fraud_status", pJson["fraud_status"], err, false))
            return false;
    }
    if(pJson.isMember("bank"))
    {
        if(!validJsonOfField(11, "bank", pJson["bank"], err, false))
            return false;
    }
    if(pJson.isMember("va_number"))
    {
        if(!validJsonOfField(12, "va_number", pJson["va_number"], err, false))
            return false;
    }
    if(pJson.isMember("currency"))
    {
        if(!validJsonOfField(13, "currency", pJson["currency"], err, false))
            return false;
    }
    if(pJson.isMember("expiry_time"))
    {
        if(!validJsonOfField(14, "expiry_time", pJson["expiry_time"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(15, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(16, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    return true;
}
bool Payments::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 17)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Payments::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Orders Payments::getOrders(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from orders where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *orderId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Orders(r[0]);
}

void Payments::getOrders(const DbClientPtr &clientPtr,
                         const std::function<void(Orders)> &rcb,
                         const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from orders where id = $1";
    *clientPtr << sql
               << *orderId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Orders(r[0]));
                    }
               }
               >> ecb;
}
