/**
 *
 *  Payments.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Payments.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::gaboot;

const std::string Payments::Cols::_id = "id";
const std::string Payments::Cols::_name = "name";
const std::string Payments::Cols::_transactionId = "transactionId";
const std::string Payments::Cols::_merchantId = "merchantId";
const std::string Payments::Cols::_paymentType = "paymentType";
const std::string Payments::Cols::_description = "description";
const std::string Payments::Cols::_transactionTime = "transactionTime";
const std::string Payments::Cols::_transactionStatus = "transactionStatus";
const std::string Payments::Cols::_fraudStatus = "fraudStatus";
const std::string Payments::Cols::_bank = "bank";
const std::string Payments::Cols::_vaNumber = "vaNumber";
const std::string Payments::Cols::_currency = "currency";
const std::string Payments::Cols::_expiry_time = "expiry_time";
const std::string Payments::Cols::_createdAt = "createdAt";
const std::string Payments::Cols::_updatedAt = "updatedAt";
const std::string Payments::primaryKeyName = "id";
const bool Payments::hasPrimaryKey = true;
const std::string Payments::tableName = "payments";

const std::vector<typename Payments::MetaData> Payments::metaData_={
{"id","int32_t","int(11)",4,1,1,1},
{"name","std::string","varchar(255)",255,0,0,0},
{"transactionId","std::string","varchar(255)",255,0,0,0},
{"merchantId","std::string","varchar(255)",255,0,0,0},
{"paymentType","std::string","varchar(255)",255,0,0,0},
{"description","std::string","varchar(255)",255,0,0,0},
{"transactionTime","std::string","varchar(255)",255,0,0,0},
{"transactionStatus","std::string","varchar(255)",255,0,0,0},
{"fraudStatus","std::string","varchar(255)",255,0,0,0},
{"bank","std::string","varchar(255)",255,0,0,0},
{"vaNumber","std::string","varchar(255)",255,0,0,0},
{"currency","std::string","varchar(255)",255,0,0,0},
{"expiry_time","std::string","varchar(255)",255,0,0,0},
{"createdAt","::trantor::Date","datetime",0,0,0,1},
{"updatedAt","::trantor::Date","datetime",0,0,0,1}
};
const std::string &Payments::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Payments::Payments(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["transactionId"].isNull())
        {
            transactionid_=std::make_shared<std::string>(r["transactionId"].as<std::string>());
        }
        if(!r["merchantId"].isNull())
        {
            merchantid_=std::make_shared<std::string>(r["merchantId"].as<std::string>());
        }
        if(!r["paymentType"].isNull())
        {
            paymenttype_=std::make_shared<std::string>(r["paymentType"].as<std::string>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["transactionTime"].isNull())
        {
            transactiontime_=std::make_shared<std::string>(r["transactionTime"].as<std::string>());
        }
        if(!r["transactionStatus"].isNull())
        {
            transactionstatus_=std::make_shared<std::string>(r["transactionStatus"].as<std::string>());
        }
        if(!r["fraudStatus"].isNull())
        {
            fraudstatus_=std::make_shared<std::string>(r["fraudStatus"].as<std::string>());
        }
        if(!r["bank"].isNull())
        {
            bank_=std::make_shared<std::string>(r["bank"].as<std::string>());
        }
        if(!r["vaNumber"].isNull())
        {
            vanumber_=std::make_shared<std::string>(r["vaNumber"].as<std::string>());
        }
        if(!r["currency"].isNull())
        {
            currency_=std::make_shared<std::string>(r["currency"].as<std::string>());
        }
        if(!r["expiry_time"].isNull())
        {
            expiryTime_=std::make_shared<std::string>(r["expiry_time"].as<std::string>());
        }
        if(!r["createdAt"].isNull())
        {
            auto timeStr = r["createdAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updatedAt"].isNull())
        {
            auto timeStr = r["updatedAt"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 15 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            transactionid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            merchantid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            paymenttype_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            transactiontime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            transactionstatus_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            fraudstatus_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            bank_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            vanumber_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            currency_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            expiryTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Payments::Payments(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            transactionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            merchantid_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            paymenttype_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            transactiontime_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            transactionstatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            fraudstatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            bank_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            vanumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            currency_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            expiryTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Payments::Payments(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("transactionId"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["transactionId"].isNull())
        {
            transactionid_=std::make_shared<std::string>(pJson["transactionId"].asString());
        }
    }
    if(pJson.isMember("merchantId"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["merchantId"].isNull())
        {
            merchantid_=std::make_shared<std::string>(pJson["merchantId"].asString());
        }
    }
    if(pJson.isMember("paymentType"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["paymentType"].isNull())
        {
            paymenttype_=std::make_shared<std::string>(pJson["paymentType"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("transactionTime"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["transactionTime"].isNull())
        {
            transactiontime_=std::make_shared<std::string>(pJson["transactionTime"].asString());
        }
    }
    if(pJson.isMember("transactionStatus"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["transactionStatus"].isNull())
        {
            transactionstatus_=std::make_shared<std::string>(pJson["transactionStatus"].asString());
        }
    }
    if(pJson.isMember("fraudStatus"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["fraudStatus"].isNull())
        {
            fraudstatus_=std::make_shared<std::string>(pJson["fraudStatus"].asString());
        }
    }
    if(pJson.isMember("bank"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["bank"].isNull())
        {
            bank_=std::make_shared<std::string>(pJson["bank"].asString());
        }
    }
    if(pJson.isMember("vaNumber"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["vaNumber"].isNull())
        {
            vanumber_=std::make_shared<std::string>(pJson["vaNumber"].asString());
        }
    }
    if(pJson.isMember("currency"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["currency"].isNull())
        {
            currency_=std::make_shared<std::string>(pJson["currency"].asString());
        }
    }
    if(pJson.isMember("expiry_time"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["expiry_time"].isNull())
        {
            expiryTime_=std::make_shared<std::string>(pJson["expiry_time"].asString());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Payments::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 15)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            transactionid_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            merchantid_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            paymenttype_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            transactiontime_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            transactionstatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            fraudstatus_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            bank_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            vanumber_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            currency_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            expiryTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Payments::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("transactionId"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["transactionId"].isNull())
        {
            transactionid_=std::make_shared<std::string>(pJson["transactionId"].asString());
        }
    }
    if(pJson.isMember("merchantId"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["merchantId"].isNull())
        {
            merchantid_=std::make_shared<std::string>(pJson["merchantId"].asString());
        }
    }
    if(pJson.isMember("paymentType"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["paymentType"].isNull())
        {
            paymenttype_=std::make_shared<std::string>(pJson["paymentType"].asString());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("transactionTime"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["transactionTime"].isNull())
        {
            transactiontime_=std::make_shared<std::string>(pJson["transactionTime"].asString());
        }
    }
    if(pJson.isMember("transactionStatus"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["transactionStatus"].isNull())
        {
            transactionstatus_=std::make_shared<std::string>(pJson["transactionStatus"].asString());
        }
    }
    if(pJson.isMember("fraudStatus"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["fraudStatus"].isNull())
        {
            fraudstatus_=std::make_shared<std::string>(pJson["fraudStatus"].asString());
        }
    }
    if(pJson.isMember("bank"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["bank"].isNull())
        {
            bank_=std::make_shared<std::string>(pJson["bank"].asString());
        }
    }
    if(pJson.isMember("vaNumber"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["vaNumber"].isNull())
        {
            vanumber_=std::make_shared<std::string>(pJson["vaNumber"].asString());
        }
    }
    if(pJson.isMember("currency"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["currency"].isNull())
        {
            currency_=std::make_shared<std::string>(pJson["currency"].asString());
        }
    }
    if(pJson.isMember("expiry_time"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["expiry_time"].isNull())
        {
            expiryTime_=std::make_shared<std::string>(pJson["expiry_time"].asString());
        }
    }
    if(pJson.isMember("createdAt"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["createdAt"].isNull())
        {
            auto timeStr = pJson["createdAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updatedAt"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["updatedAt"].isNull())
        {
            auto timeStr = pJson["updatedAt"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedat_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int32_t &Payments::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Payments::getId() const noexcept
{
    return id_;
}
void Payments::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Payments::PrimaryKeyType & Payments::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Payments::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getName() const noexcept
{
    return name_;
}
void Payments::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Payments::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}
void Payments::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Payments::getValueOfTransactionid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(transactionid_)
        return *transactionid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getTransactionid() const noexcept
{
    return transactionid_;
}
void Payments::setTransactionid(const std::string &pTransactionid) noexcept
{
    transactionid_ = std::make_shared<std::string>(pTransactionid);
    dirtyFlag_[2] = true;
}
void Payments::setTransactionid(std::string &&pTransactionid) noexcept
{
    transactionid_ = std::make_shared<std::string>(std::move(pTransactionid));
    dirtyFlag_[2] = true;
}
void Payments::setTransactionidToNull() noexcept
{
    transactionid_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Payments::getValueOfMerchantid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(merchantid_)
        return *merchantid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getMerchantid() const noexcept
{
    return merchantid_;
}
void Payments::setMerchantid(const std::string &pMerchantid) noexcept
{
    merchantid_ = std::make_shared<std::string>(pMerchantid);
    dirtyFlag_[3] = true;
}
void Payments::setMerchantid(std::string &&pMerchantid) noexcept
{
    merchantid_ = std::make_shared<std::string>(std::move(pMerchantid));
    dirtyFlag_[3] = true;
}
void Payments::setMerchantidToNull() noexcept
{
    merchantid_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Payments::getValueOfPaymenttype() const noexcept
{
    const static std::string defaultValue = std::string();
    if(paymenttype_)
        return *paymenttype_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getPaymenttype() const noexcept
{
    return paymenttype_;
}
void Payments::setPaymenttype(const std::string &pPaymenttype) noexcept
{
    paymenttype_ = std::make_shared<std::string>(pPaymenttype);
    dirtyFlag_[4] = true;
}
void Payments::setPaymenttype(std::string &&pPaymenttype) noexcept
{
    paymenttype_ = std::make_shared<std::string>(std::move(pPaymenttype));
    dirtyFlag_[4] = true;
}
void Payments::setPaymenttypeToNull() noexcept
{
    paymenttype_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Payments::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getDescription() const noexcept
{
    return description_;
}
void Payments::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[5] = true;
}
void Payments::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[5] = true;
}
void Payments::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Payments::getValueOfTransactiontime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(transactiontime_)
        return *transactiontime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getTransactiontime() const noexcept
{
    return transactiontime_;
}
void Payments::setTransactiontime(const std::string &pTransactiontime) noexcept
{
    transactiontime_ = std::make_shared<std::string>(pTransactiontime);
    dirtyFlag_[6] = true;
}
void Payments::setTransactiontime(std::string &&pTransactiontime) noexcept
{
    transactiontime_ = std::make_shared<std::string>(std::move(pTransactiontime));
    dirtyFlag_[6] = true;
}
void Payments::setTransactiontimeToNull() noexcept
{
    transactiontime_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Payments::getValueOfTransactionstatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(transactionstatus_)
        return *transactionstatus_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getTransactionstatus() const noexcept
{
    return transactionstatus_;
}
void Payments::setTransactionstatus(const std::string &pTransactionstatus) noexcept
{
    transactionstatus_ = std::make_shared<std::string>(pTransactionstatus);
    dirtyFlag_[7] = true;
}
void Payments::setTransactionstatus(std::string &&pTransactionstatus) noexcept
{
    transactionstatus_ = std::make_shared<std::string>(std::move(pTransactionstatus));
    dirtyFlag_[7] = true;
}
void Payments::setTransactionstatusToNull() noexcept
{
    transactionstatus_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Payments::getValueOfFraudstatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fraudstatus_)
        return *fraudstatus_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getFraudstatus() const noexcept
{
    return fraudstatus_;
}
void Payments::setFraudstatus(const std::string &pFraudstatus) noexcept
{
    fraudstatus_ = std::make_shared<std::string>(pFraudstatus);
    dirtyFlag_[8] = true;
}
void Payments::setFraudstatus(std::string &&pFraudstatus) noexcept
{
    fraudstatus_ = std::make_shared<std::string>(std::move(pFraudstatus));
    dirtyFlag_[8] = true;
}
void Payments::setFraudstatusToNull() noexcept
{
    fraudstatus_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Payments::getValueOfBank() const noexcept
{
    const static std::string defaultValue = std::string();
    if(bank_)
        return *bank_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getBank() const noexcept
{
    return bank_;
}
void Payments::setBank(const std::string &pBank) noexcept
{
    bank_ = std::make_shared<std::string>(pBank);
    dirtyFlag_[9] = true;
}
void Payments::setBank(std::string &&pBank) noexcept
{
    bank_ = std::make_shared<std::string>(std::move(pBank));
    dirtyFlag_[9] = true;
}
void Payments::setBankToNull() noexcept
{
    bank_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Payments::getValueOfVanumber() const noexcept
{
    const static std::string defaultValue = std::string();
    if(vanumber_)
        return *vanumber_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getVanumber() const noexcept
{
    return vanumber_;
}
void Payments::setVanumber(const std::string &pVanumber) noexcept
{
    vanumber_ = std::make_shared<std::string>(pVanumber);
    dirtyFlag_[10] = true;
}
void Payments::setVanumber(std::string &&pVanumber) noexcept
{
    vanumber_ = std::make_shared<std::string>(std::move(pVanumber));
    dirtyFlag_[10] = true;
}
void Payments::setVanumberToNull() noexcept
{
    vanumber_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Payments::getValueOfCurrency() const noexcept
{
    const static std::string defaultValue = std::string();
    if(currency_)
        return *currency_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getCurrency() const noexcept
{
    return currency_;
}
void Payments::setCurrency(const std::string &pCurrency) noexcept
{
    currency_ = std::make_shared<std::string>(pCurrency);
    dirtyFlag_[11] = true;
}
void Payments::setCurrency(std::string &&pCurrency) noexcept
{
    currency_ = std::make_shared<std::string>(std::move(pCurrency));
    dirtyFlag_[11] = true;
}
void Payments::setCurrencyToNull() noexcept
{
    currency_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Payments::getValueOfExpiryTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(expiryTime_)
        return *expiryTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Payments::getExpiryTime() const noexcept
{
    return expiryTime_;
}
void Payments::setExpiryTime(const std::string &pExpiryTime) noexcept
{
    expiryTime_ = std::make_shared<std::string>(pExpiryTime);
    dirtyFlag_[12] = true;
}
void Payments::setExpiryTime(std::string &&pExpiryTime) noexcept
{
    expiryTime_ = std::make_shared<std::string>(std::move(pExpiryTime));
    dirtyFlag_[12] = true;
}
void Payments::setExpiryTimeToNull() noexcept
{
    expiryTime_.reset();
    dirtyFlag_[12] = true;
}

const ::trantor::Date &Payments::getValueOfCreatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdat_)
        return *createdat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Payments::getCreatedat() const noexcept
{
    return createdat_;
}
void Payments::setCreatedat(const ::trantor::Date &pCreatedat) noexcept
{
    createdat_ = std::make_shared<::trantor::Date>(pCreatedat);
    dirtyFlag_[13] = true;
}

const ::trantor::Date &Payments::getValueOfUpdatedat() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedat_)
        return *updatedat_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Payments::getUpdatedat() const noexcept
{
    return updatedat_;
}
void Payments::setUpdatedat(const ::trantor::Date &pUpdatedat) noexcept
{
    updatedat_ = std::make_shared<::trantor::Date>(pUpdatedat);
    dirtyFlag_[14] = true;
}

void Payments::updateId(const uint64_t id)
{
    id_ = std::make_shared<int32_t>(static_cast<int32_t>(id));
}

const std::vector<std::string> &Payments::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "transactionId",
        "merchantId",
        "paymentType",
        "description",
        "transactionTime",
        "transactionStatus",
        "fraudStatus",
        "bank",
        "vaNumber",
        "currency",
        "expiry_time",
        "createdAt",
        "updatedAt"
    };
    return inCols;
}

void Payments::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTransactionid())
        {
            binder << getValueOfTransactionid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMerchantid())
        {
            binder << getValueOfMerchantid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPaymenttype())
        {
            binder << getValueOfPaymenttype();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTransactiontime())
        {
            binder << getValueOfTransactiontime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTransactionstatus())
        {
            binder << getValueOfTransactionstatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFraudstatus())
        {
            binder << getValueOfFraudstatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getBank())
        {
            binder << getValueOfBank();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getVanumber())
        {
            binder << getValueOfVanumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCurrency())
        {
            binder << getValueOfCurrency();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getExpiryTime())
        {
            binder << getValueOfExpiryTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Payments::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    return ret;
}

void Payments::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTransactionid())
        {
            binder << getValueOfTransactionid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getMerchantid())
        {
            binder << getValueOfMerchantid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getPaymenttype())
        {
            binder << getValueOfPaymenttype();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getTransactiontime())
        {
            binder << getValueOfTransactiontime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getTransactionstatus())
        {
            binder << getValueOfTransactionstatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFraudstatus())
        {
            binder << getValueOfFraudstatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getBank())
        {
            binder << getValueOfBank();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getVanumber())
        {
            binder << getValueOfVanumber();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getCurrency())
        {
            binder << getValueOfCurrency();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getExpiryTime())
        {
            binder << getValueOfExpiryTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getCreatedat())
        {
            binder << getValueOfCreatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getUpdatedat())
        {
            binder << getValueOfUpdatedat();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Payments::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTransactionid())
    {
        ret["transactionId"]=getValueOfTransactionid();
    }
    else
    {
        ret["transactionId"]=Json::Value();
    }
    if(getMerchantid())
    {
        ret["merchantId"]=getValueOfMerchantid();
    }
    else
    {
        ret["merchantId"]=Json::Value();
    }
    if(getPaymenttype())
    {
        ret["paymentType"]=getValueOfPaymenttype();
    }
    else
    {
        ret["paymentType"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getTransactiontime())
    {
        ret["transactionTime"]=getValueOfTransactiontime();
    }
    else
    {
        ret["transactionTime"]=Json::Value();
    }
    if(getTransactionstatus())
    {
        ret["transactionStatus"]=getValueOfTransactionstatus();
    }
    else
    {
        ret["transactionStatus"]=Json::Value();
    }
    if(getFraudstatus())
    {
        ret["fraudStatus"]=getValueOfFraudstatus();
    }
    else
    {
        ret["fraudStatus"]=Json::Value();
    }
    if(getBank())
    {
        ret["bank"]=getValueOfBank();
    }
    else
    {
        ret["bank"]=Json::Value();
    }
    if(getVanumber())
    {
        ret["vaNumber"]=getValueOfVanumber();
    }
    else
    {
        ret["vaNumber"]=Json::Value();
    }
    if(getCurrency())
    {
        ret["currency"]=getValueOfCurrency();
    }
    else
    {
        ret["currency"]=Json::Value();
    }
    if(getExpiryTime())
    {
        ret["expiry_time"]=getValueOfExpiryTime();
    }
    else
    {
        ret["expiry_time"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

Json::Value Payments::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 15)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTransactionid())
            {
                ret[pMasqueradingVector[2]]=getValueOfTransactionid();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getMerchantid())
            {
                ret[pMasqueradingVector[3]]=getValueOfMerchantid();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getPaymenttype())
            {
                ret[pMasqueradingVector[4]]=getValueOfPaymenttype();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[5]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getTransactiontime())
            {
                ret[pMasqueradingVector[6]]=getValueOfTransactiontime();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getTransactionstatus())
            {
                ret[pMasqueradingVector[7]]=getValueOfTransactionstatus();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getFraudstatus())
            {
                ret[pMasqueradingVector[8]]=getValueOfFraudstatus();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getBank())
            {
                ret[pMasqueradingVector[9]]=getValueOfBank();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getVanumber())
            {
                ret[pMasqueradingVector[10]]=getValueOfVanumber();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getCurrency())
            {
                ret[pMasqueradingVector[11]]=getValueOfCurrency();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getExpiryTime())
            {
                ret[pMasqueradingVector[12]]=getValueOfExpiryTime();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getCreatedat())
            {
                ret[pMasqueradingVector[13]]=getCreatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getUpdatedat())
            {
                ret[pMasqueradingVector[14]]=getUpdatedat()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getTransactionid())
    {
        ret["transactionId"]=getValueOfTransactionid();
    }
    else
    {
        ret["transactionId"]=Json::Value();
    }
    if(getMerchantid())
    {
        ret["merchantId"]=getValueOfMerchantid();
    }
    else
    {
        ret["merchantId"]=Json::Value();
    }
    if(getPaymenttype())
    {
        ret["paymentType"]=getValueOfPaymenttype();
    }
    else
    {
        ret["paymentType"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getTransactiontime())
    {
        ret["transactionTime"]=getValueOfTransactiontime();
    }
    else
    {
        ret["transactionTime"]=Json::Value();
    }
    if(getTransactionstatus())
    {
        ret["transactionStatus"]=getValueOfTransactionstatus();
    }
    else
    {
        ret["transactionStatus"]=Json::Value();
    }
    if(getFraudstatus())
    {
        ret["fraudStatus"]=getValueOfFraudstatus();
    }
    else
    {
        ret["fraudStatus"]=Json::Value();
    }
    if(getBank())
    {
        ret["bank"]=getValueOfBank();
    }
    else
    {
        ret["bank"]=Json::Value();
    }
    if(getVanumber())
    {
        ret["vaNumber"]=getValueOfVanumber();
    }
    else
    {
        ret["vaNumber"]=Json::Value();
    }
    if(getCurrency())
    {
        ret["currency"]=getValueOfCurrency();
    }
    else
    {
        ret["currency"]=Json::Value();
    }
    if(getExpiryTime())
    {
        ret["expiry_time"]=getValueOfExpiryTime();
    }
    else
    {
        ret["expiry_time"]=Json::Value();
    }
    if(getCreatedat())
    {
        ret["createdAt"]=getCreatedat()->toDbStringLocal();
    }
    else
    {
        ret["createdAt"]=Json::Value();
    }
    if(getUpdatedat())
    {
        ret["updatedAt"]=getUpdatedat()->toDbStringLocal();
    }
    else
    {
        ret["updatedAt"]=Json::Value();
    }
    return ret;
}

bool Payments::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("transactionId"))
    {
        if(!validJsonOfField(2, "transactionId", pJson["transactionId"], err, true))
            return false;
    }
    if(pJson.isMember("merchantId"))
    {
        if(!validJsonOfField(3, "merchantId", pJson["merchantId"], err, true))
            return false;
    }
    if(pJson.isMember("paymentType"))
    {
        if(!validJsonOfField(4, "paymentType", pJson["paymentType"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(5, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("transactionTime"))
    {
        if(!validJsonOfField(6, "transactionTime", pJson["transactionTime"], err, true))
            return false;
    }
    if(pJson.isMember("transactionStatus"))
    {
        if(!validJsonOfField(7, "transactionStatus", pJson["transactionStatus"], err, true))
            return false;
    }
    if(pJson.isMember("fraudStatus"))
    {
        if(!validJsonOfField(8, "fraudStatus", pJson["fraudStatus"], err, true))
            return false;
    }
    if(pJson.isMember("bank"))
    {
        if(!validJsonOfField(9, "bank", pJson["bank"], err, true))
            return false;
    }
    if(pJson.isMember("vaNumber"))
    {
        if(!validJsonOfField(10, "vaNumber", pJson["vaNumber"], err, true))
            return false;
    }
    if(pJson.isMember("currency"))
    {
        if(!validJsonOfField(11, "currency", pJson["currency"], err, true))
            return false;
    }
    if(pJson.isMember("expiry_time"))
    {
        if(!validJsonOfField(12, "expiry_time", pJson["expiry_time"], err, true))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(13, "createdAt", pJson["createdAt"], err, true))
            return false;
    }
    else
    {
        err="The createdAt column cannot be null";
        return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(14, "updatedAt", pJson["updatedAt"], err, true))
            return false;
    }
    else
    {
        err="The updatedAt column cannot be null";
        return false;
    }
    return true;
}
bool Payments::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[13] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[14] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Payments::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("transactionId"))
    {
        if(!validJsonOfField(2, "transactionId", pJson["transactionId"], err, false))
            return false;
    }
    if(pJson.isMember("merchantId"))
    {
        if(!validJsonOfField(3, "merchantId", pJson["merchantId"], err, false))
            return false;
    }
    if(pJson.isMember("paymentType"))
    {
        if(!validJsonOfField(4, "paymentType", pJson["paymentType"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(5, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("transactionTime"))
    {
        if(!validJsonOfField(6, "transactionTime", pJson["transactionTime"], err, false))
            return false;
    }
    if(pJson.isMember("transactionStatus"))
    {
        if(!validJsonOfField(7, "transactionStatus", pJson["transactionStatus"], err, false))
            return false;
    }
    if(pJson.isMember("fraudStatus"))
    {
        if(!validJsonOfField(8, "fraudStatus", pJson["fraudStatus"], err, false))
            return false;
    }
    if(pJson.isMember("bank"))
    {
        if(!validJsonOfField(9, "bank", pJson["bank"], err, false))
            return false;
    }
    if(pJson.isMember("vaNumber"))
    {
        if(!validJsonOfField(10, "vaNumber", pJson["vaNumber"], err, false))
            return false;
    }
    if(pJson.isMember("currency"))
    {
        if(!validJsonOfField(11, "currency", pJson["currency"], err, false))
            return false;
    }
    if(pJson.isMember("expiry_time"))
    {
        if(!validJsonOfField(12, "expiry_time", pJson["expiry_time"], err, false))
            return false;
    }
    if(pJson.isMember("createdAt"))
    {
        if(!validJsonOfField(13, "createdAt", pJson["createdAt"], err, false))
            return false;
    }
    if(pJson.isMember("updatedAt"))
    {
        if(!validJsonOfField(14, "updatedAt", pJson["updatedAt"], err, false))
            return false;
    }
    return true;
}
bool Payments::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 15)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Payments::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
